<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中级软件设计师知识点</title>
      <link href="/2023/03/17/zjrkzs/"/>
      <url>/2023/03/17/zjrkzs/</url>
      
        <content type="html"><![CDATA[<h3 id="一-计算机组成"><a href="#一-计算机组成" class="headerlink" title="一 计算机组成"></a>一 计算机组成</h3><p>计算机硬件基本系统有五大部分组成：运算器，控制器，存储器，输入设备，输出设备。<br>存储器分为内部存储器（即内存，容量小，速度快，临时存放数据）和外部存储器（即硬盘，光盘等，容量大，速度慢，长期保存数据）<br>中央处理单元组成：由运算器，控制器，寄存器组和内部总线组成<br>中央处理单元功能：实现程序控制，操作控制，时间控制，数据处理功能。<br>运算器组成：算术逻辑单元ALU（实现对数据的算术和逻辑运算），累加寄存器AC（运算结果或源操作数的存放区），数据缓冲寄存器DR（暂时存放内容的指令或数据）， 状态条件寄存器PSW（保存指令运行结果的条件码内容，如溢出标志<br>运算器功能：执行所有的算术运算，如加减乘除等。执行所有的逻辑运算并进行逻辑测试，如与，或，非，比较等。<br>控制器组成：指令寄存器IR（暂存CPU执行指令），程序计数器PC（存放下一条执行地址），地址寄存器AR（保存当前CPU所访问的内存地址），指令译码器ID（分析指令操作码）等组成<br>控制器功能：控制整个CPU的工作，最为重要，包括程序控制，时序控制等。</p><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>码距：所谓码距，是指一个编码系统中任意两个合法编码之间有多少个二进制位不同</p><h4 id="奇偶校验码（只能检一位错，并且不能纠错）"><a href="#奇偶校验码（只能检一位错，并且不能纠错）" class="headerlink" title="奇偶校验码（只能检一位错，并且不能纠错）"></a>奇偶校验码（只能检一位错，并且不能纠错）</h4><p>奇偶校验码是一种简单有效的检验方法，这种方法通过在编码中增加一位检验位来使编码中1的个数为奇数（奇校验）或者为偶数（偶校验），从而使码距变成2</p><h4 id="循环冗余校验码CRC（只能检错，不能纠错）"><a href="#循环冗余校验码CRC（只能检错，不能纠错）" class="headerlink" title="循环冗余校验码CRC（只能检错，不能纠错）"></a>循环冗余校验码CRC（只能检错，不能纠错）</h4><p>循环冗余校验码广泛应用于数据通信领域和磁介质存储系统。它利用生成多项式为k个数据位产生r个检验位来进行编码，其编码长度为k+r。CRC的代码格式为：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%870.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%870.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>由此可知，CRC是由两部分组成，左边为信息位（数据），右边为检验码。若信息码占k位，则检验码占n-k为，检验码是由信息码产生的，检验码的位数越多，改代码的检验能力就越强。在求CRC编码时，采用的是模2运算（按位运算，不发生借位和进位）。</p><h4 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h4><p>海明码是一种利用奇偶性来检错和纠错的校验方法。海明码的构成方法是在数据位之间的特定位置上插入k个检验位，通过扩大码距来实现检错和纠错。<br>设数据位是n位，检验位是k位，则n和k必须满足以下关系：<br>2k−1≥n+k2^k-1 \geq n+k2k−1≥n+k</p><h3 id="计算机体系结构分类"><a href="#计算机体系结构分类" class="headerlink" title="计算机体系结构分类"></a>计算机体系结构分类</h3><h4 id="Flynn分类法（理论存在：多指令单数据-MISD）"><a href="#Flynn分类法（理论存在：多指令单数据-MISD）" class="headerlink" title="Flynn分类法（理论存在：多指令单数据 MISD）"></a>Flynn分类法（理论存在：多指令单数据 MISD）</h4><p><img src="/../../images/rk/%E5%9B%BE%E7%89%871.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%871.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>CISC是复杂指令系统，兼容性强，指令繁多，长度可变，由微程序实现。<br>RISC是精简指令系统，指令少，使用频率接近，主要依靠硬件实现（通用寄存器，硬布线逻辑控制）<br>具体区别如下：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%872.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%872.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h3><p>流水线周期：指令分成不同执行段，其中执行最长的为段位流水线周期。<br>流水线执行时间：1条指令的总执行时间+（总指令条数-1）*流水线周期<br>流水线吞吐率：总指令条数&#x2F;流水线执行时间<br>流水线加速比：不使用流水线总执行时间&#x2F;使用流水线总执行时间。</p><h3 id="主存编址"><a href="#主存编址" class="headerlink" title="主存编址"></a>主存编址</h3><p>会算就行了，直接上真题<br><img src="/../../images/rk/%E5%9B%BE%E7%89%873.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%873.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>先不用算出来，后面可以化简（B,C）<br><img src="/../../images/rk/%E5%9B%BE%E7%89%874.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%874.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><p>设备分类方式<br>按数据组织分类：块设备，字符设备。<br>资源分配角度分类：独占设备，共享设备和虚拟设备。<br>数据传输率分类：低速设备，中速设备和高速设备。<br>I&#x2F;O软件层次结构（越往上越和硬件无关）<br><img src="/../../images/rk/%E5%9B%BE%E7%89%875.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%875.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="输入输出技术"><a href="#输入输出技术" class="headerlink" title="输入输出技术"></a>输入输出技术</h3><p>程序控制（查询）方式：CPU主动查询外设是否完成数据传输，效率极低。<br>程序中断方式：外设完成数据传输后，向CPU发送中断，等待CPU处理数据，效率相对较高。适用于键盘等实时性较强的场景。<br>中断响应时间是指从发出中断请求到开始进入中断处理程序；中断处理时间是指从中断处理程序开始到中断处理结束，中断向量提供中断处理程序的入口地址。多级中断嵌套，使用堆栈来保护断点和现场。<br>DMA方式（直接主存存取）：CPU只需完成必要的初始化等操作，数据传输的整个过程由DMA控制器来完成，在主存和外设之间建立直接的数据通路，效率很高。适用于硬盘等高速设备。</p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><p>磁盘调度的目标是使磁盘的平均寻道时间最少<br>常用的磁盘调度算法如下：<br>先来先服务FCFS：根据进程请求访问磁盘的的先后顺序进行调度。此算法的优点是公平，简单，且每个进程都能依次得到处理，缺点是平均寻道时间长。<br>最短寻道时间优先SSTF：请求访问的磁道与当前磁头所在磁道距离最近。使得每次的寻道时间最短。但不能保证平均寻道时间最短。<br>扫描算法SCAN：又称“电梯算法”，磁头在磁盘上双向移动，其会选择离磁头当前所在磁道最近请求访问的磁道，并且与磁头移动方向一致，磁头永远都是从里向外或者从外向里一直移动完才掉头，与电梯类似。<br>单向扫描算法CSCAN:与SCAN不同的是，其只做单向移动，即只能从里向外或者从外向里。</p><h2 id="二-软件工程基础知识"><a href="#二-软件工程基础知识" class="headerlink" title="二 软件工程基础知识"></a>二 软件工程基础知识</h2><p>软件工程基本要素：方法，工具，过程</p><h3 id="软件生存周期（常考产出物）"><a href="#软件生存周期（常考产出物）" class="headerlink" title="软件生存周期（常考产出物）"></a>软件生存周期（常考产出物）</h3><h4 id="可行性分析与项目开发计划"><a href="#可行性分析与项目开发计划" class="headerlink" title="可行性分析与项目开发计划"></a>可行性分析与项目开发计划</h4><p>这个阶段主要确定软件的开发目标及其可行性<br>参加人员有用户，项目负责人和系统分析师<br>该阶段产生的主要文档有可行性分析报告和项目 开发计划，从而确定系统的逻辑模型</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>这个阶段确定软件的系统的功能，性能，数据和界面等要求<br>参加人员有用户，项目负责人和系统分析师。<br>该阶段产生的主要文档软件需求说明书</p><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><p>在概要设计阶段，开发人员要把确定的各项功能 需求转换需要的体系结构。概要设计就是设计软件的结构<br>概要设计概要的参加人员有系统分析师和软件设计师<br>该阶段主要产生文档有概要设计说明书</p><h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><p>详细设计阶段的主要任务是对每个模块完成的功能进行具体描述，要把功能描述转变为精确的，结构化的过程描述。<br>详细设计阶段的参加人员有软件设计师和程序员。<br>该阶段主要产生文档有详细设计文档。</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>编码阶段就是把每个模块的控制结构转换成计算机课接受的程序代码。即写成某种特定程序设计语言表示的源程序清单</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试是保证软件质量的重要手段，其主要方式是在设计测试用例的基础上检查软件的各个组成部分。<br>测试阶段的参加人员通常是另一部门的软件设计师或系统分析师。<br>该阶段主要产生文档有软件测试计划，测试用例和软件测试报告。</p><h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h3><h4 id="能力成熟度模型CMM"><a href="#能力成熟度模型CMM" class="headerlink" title="能力成熟度模型CMM"></a>能力成熟度模型CMM</h4><p>能力成熟度模型CMM：对软件组织化阶段的描述，随着软件组织地定义、实施，测量、控制和改进其软件过程，软件组织地能力经过这些阶段逐步提高。</p><ol><li><p>初始级（Initial）：软件过程的特点是杂乱无章，又是甚至很混乱，几乎没有明确定义的步骤，项目的完成全依赖个人的努力和英雄式核心人物的作用。</p></li><li><p>可重复级（Repeatable）：建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性，有必要的过程准则来重复以前在同类项目中的成功。</p></li><li><p>已定义级（Defined）：管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件来发组织地标准软件过程，所有项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。</p></li><li><p>已管理级（Managed）：制定了软件过程和产品质量的详细度量标准。软件过程的产品质量都被开发组织地成员所理解和控制。</p></li><li><p>优化级（Optimized）：加强了定量分析，通过来之过程质量反馈和来自新观念、新技术的反馈使过程能不断持续地改进。</p><h4 id="能力成熟度模型CMMI"><a href="#能力成熟度模型CMMI" class="headerlink" title="能力成熟度模型CMMI"></a>能力成熟度模型CMMI</h4><p>能力成熟度模型CMMI：将已有的几个CMM模型结合在一起，使之构造成为“集成模型”。支持多个工程学科和领域的、系统的、一致的过程改进框架，能适应现代工程的特点和需求，能提高过程的质量和工作效率。<br>阶段式模型：类似于CMM，它关注组织地成熟度，五个成熟度模型如下：</p></li><li><p>初始的：过程不可预测且缺乏控制。</p></li><li><p>已管理的：过程为项目服务。</p></li><li><p>以定义的：过程为组织服务。</p></li><li><p>定量管理的：过程为以度量和控制。</p></li><li><p>优化的：集中于过程改进。</p><h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><p>软件维护是软件设计生存周期中时间最长的阶段。已交付的软件投入正式使用后，便进入软件维护阶段，它可以持续几年甚至十几年。</p><h3 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h3><h4 id="统一过程模型（UP）"><a href="#统一过程模型（UP）" class="headerlink" title="统一过程模型（UP）"></a>统一过程模型（UP）</h4><p>统一过程模型：是一种“用例和风险驱动，以架构为中心，迭代并且增量”的开发过程。<br>开发的四个阶段</p></li><li><p>起始阶段：项目的初始活动，如确认需求和风险评估等。</p></li><li><p>精化阶段：需求分许和架构设计等。</p></li><li><p>构建阶段：系统的构建，产生实现模型等。</p></li><li><p>移交阶段：软件提交方面的工作，产生软件增量，进行β测试，交付系统等。<br>UP的每一次迭代都是一次完整的软件开发过程，包括整个软件开发生命周期，有五个核心工作流（需求-分析-设计-实现-测试）。</p><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>结构化方法中的模型，是结构化的开发，开发流程如瀑布一样，一步一步走下去，直到项目完成开发<br>只适用于需求明确或者二次开发（需求稳定）的项目</p><h4 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h4><p>是瀑布模型的一个变种。特点是增加了多轮测试，并且这些测试贯穿于软件开发的各个阶段</p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>快速原型开发，与瀑布模型相反，原型针对需求不明确的情况</p><h4 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h4><p>是多种模型的混合，针对需求不明确的项目，与原型相似，但增加了风险分析（制定计划—风险分析—实施工程—用户评估）</p><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><p>首先开发核心功能模块，而后与用户确认，之后再开发次核心功能，即每次开发一部分功能，并与用户需求确认，最终完成项目开发，优先级高的服务最先交付。<br>增量模型的每一次增量版本都可作为独立操作的作品</p><h4 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h4><p>是一种以用户需求为动力，以对象作为驱动的模型。适用于面向对象的开发方法是开发过程具有迭代性和无间隙性</p><h4 id="基于构建的开发模型"><a href="#基于构建的开发模型" class="headerlink" title="基于构建的开发模型"></a>基于构建的开发模型</h4><p>利于预先包装的构件来构造应用系统，构件是可以组织内部开发的构件，也可以是商品化成品软件构件。<br>提点是增强了复用性，在系统开发过程中，会构建一个构件库，供其他系统复用，因此可以提高复用性，节省时间和成本。</p><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p>敏捷开发的总体目标是通过“尽可能早，持续地对有价值的软件的交付”使客户满意。通过在软件开发过程中加入灵活性，敏捷开发使用户能够在开发周期的后期增加或者改变需求。</p><h4 id="自适应开发（ASD）"><a href="#自适应开发（ASD）" class="headerlink" title="自适应开发（ASD）"></a>自适应开发（ASD）</h4><p>强调开发方法的适应性</p><h4 id="水晶方法（Crystal）"><a href="#水晶方法（Crystal）" class="headerlink" title="水晶方法（Crystal）"></a>水晶方法（Crystal）</h4><p>水晶法认为每一个不同项目都需要一套不同的策略，约定和方法论</p><h4 id="特性驱动开发"><a href="#特性驱动开发" class="headerlink" title="特性驱动开发"></a>特性驱动开发</h4><p>是一套针对中小型软件开发项目的开发模式，是一个模型驱动的快速迭代开发过程，它强调的是简化，使用，易被开发团队接受，适用于需求经常变动的项目</p><h4 id="并列争求法（Scrum）"><a href="#并列争求法（Scrum）" class="headerlink" title="并列争求法（Scrum）"></a>并列争求法（Scrum）</h4><p>并列争求法是一种迭代的增量化过程，其中，把每30天一次的迭代称为一个“冲刺”，并按需求的优先级来实现产品。</p><h4 id="极限编程（XP）"><a href="#极限编程（XP）" class="headerlink" title="极限编程（XP）"></a>极限编程（XP）</h4><p>XP是一种轻量级（敏捷），高效，低风险，柔性，可预测，科学的软件开发方式。<br>四大价值观：沟通，简单性，反馈和勇气。<br>五个原则：快速反馈，简单性假设，逐步修改，提倡更改和优质工作。<br>12个最佳实践：计划游戏，小型发布，隐喻，简单设计，测试先行，重构，结队编程，集体代码所有制，持续集成，每周工作40小时，现场客户和编码标准</p><h5 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h5><p>一个程序员开发，另一个审查代码，能够有效的提高代码的质量</p><h3 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h3><p>软件开发工具：对于软件开发过程的各种活动。包括需求分析工具，设计工具，编码与排错工具，测试工具。<br>软件维护工具：辅助软件维护过程中活动的软件，辅助维护人员对软件代码及文档进行各种维护活动。包括版本控制工具，文档分析工具，开发信息库工具，逆向工程工具，再工程工具。<br>软件管理和软件支持工具：辅助管理人员和软件支持人员的管理活动和支持活动，以确保软件高质量完成。包括项目管理工具，配置管理工具，软件评价工具。</p><h3 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h3><p>有效的项目管理集中在4P上：人员，产品，过程，项目。<br>软件项目估算方法：成本估算方法<br>自顶向下估算：又称类比估算法，确定一个总金额，在向下分摊到每一个功能点。<br>自底向上估算：又称底层功能点开始估算成本，向上累加。<br>差别估算法：与以前的项目相比，找出不同点重新估算，相同点则直接估算。<br>专家估算：聘请专家以其经验对项目整体费用进行估算。<br>COCOMO模型：常见的软件规模估算方法。常用的代码行分析方法作为一种度量估计单位，以代码行数估算每个程序员工作量。累加得软件成本。<br>模型按其详细程度可以可以分为三级：基本COCOMO模型，中间COCOMO模型，详细COCOMO模型。其中基本COCOMO模型是一个静态单变量模型，它用一个以估算出来的原代码行数为自变量的经验函数计算软件开发工作量。中间COCOMO模型在基础COCOMO模型的基础上，再用涉及产品、硬件、人员、项目等方面影响因素调整工作量的估算。详细COCOMO模型包括中间COCOMO模型所有特性，但更进一步考虑了软件工程的每一个步骤的影响。<br>COCOMO II模型：COCOMO模型的升级，也是以软件规模作为成本的主要因素，考虑多个成本驱动因子。该方法包括三个阶段性模型，即应用组装模型，早期设计阶段模型，体系结构阶段模型<br>Putnam估算模型：一种动态多变量模型，假设在软件开发的整个生存周期中工作量有特定的分布。</p><h3 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h3><p>基本原则：划分，相互依赖，时间分配，工作量确认，确认责任，明确输出结果，确定里程碑。<br>Gantt图：又称横道图，横轴表示时间，纵轴表示活动，以时间顺序表示活动，能<br>反应活动间的并行关系，但无法反应活动间的依赖关系，因此也难以清晰的确定关键任务和关键路径。<br>PERT图：类似前趋图，是有向图，反应活动间的依赖关系，有向边上标注活动的运行时间，但无法反应活动间的并行关系。<br>PERT图关键路径：<br>最早开始时间ES：取所有前驱活动最早完成时间EF的最大值。<br>最早完成时间EF：ES+DU（活动本身时间）。<br>关键路径（项目总工期）：项目中耗时最长的线路。<br>最晚完成时间LF：取后续活动最晚开始时间的最小值。<br>最晚开始时间LS：LF-DU<br>松弛时间：LS-ES 或者LF-EF （即活动最多可以晚几天开始）<br><img src="/../../images/rk/%E5%9B%BE%E7%89%876.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%876.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>关键路径为图中最长的路径即 D-F-H 权值为48所以第一空选C<br>FG的松弛时间为 关键路径 - 包含FG的最长路径 （DFH）-（DFG）&#x3D;48-28&#x3D;20 所以第二空为B</p><h3 id="软件项目的组织"><a href="#软件项目的组织" class="headerlink" title="软件项目的组织"></a>软件项目的组织</h3><p>程序设计小组的组织方式：<br>主程序员制小组：主程序员全权负责，后援工程师有必要时能替代主程序员，适合大规模项目。<br>民主制小组：也即无主程序员小组，成员之间地位平等，任何决策都是全员参与投票，适合于项目规模小，开发人员少，采用新技术和确定性较小的项目。<br>层次式小组：两个层次，一名组长领导若干个高级程序员，每个高级程序员领导若干个程序员。</p><h3 id="软件质量管理"><a href="#软件质量管理" class="headerlink" title="软件质量管理"></a>软件质量管理</h3><table><thead><tr><th><strong>质量特性</strong></th><th><strong>质量子特性</strong></th></tr></thead><tbody><tr><td>功能性</td><td>适合性 准确性 互用性 依从性 安全性</td></tr><tr><td>可靠性</td><td>成熟性 容错性 易恢复性</td></tr><tr><td>易使用性</td><td>易理解性 易学性 易操作性</td></tr><tr><td>效率</td><td>时间特性 资源特性</td></tr><tr><td>可维护性</td><td>易分析性 易改变性 稳定性 易测试性</td></tr><tr><td>可移植性</td><td>适应性 易安装性 一致性 易替换性</td></tr></tbody></table></li></ol><p>可维护性（常考）<br>易分析性：与为诊断缺陷或失效原因，或为判定待修改部分所需那里有关的软件属性。<br>易改变性：与进行修改、排错、或适应环境变换所需努力有关的软件属性。<br>稳定性：与修改造成未预料效果风险有关的软件属性。<br>易测试性：为确认经修改软件所需努力有关的软件属性。</p><h3 id="软件容错技术"><a href="#软件容错技术" class="headerlink" title="软件容错技术"></a>软件容错技术</h3><p>通常将质量理解为用户满意程度，为了使用户满意，有两个必要条件：设计的规格说明书符合用户标准，称为设计质量。程序按照设计规模书所规定的情况正确执行，称为程序质量。<br>设计质量评审，程序质量评审<br>软件容错技术：<br>容错就是软件遇到错误的处理能力，实现容错的手段主要是冗余，包括下面四种冗余技术：<br>结构冗余：分为静态（通过表决和比较，少数服从多数）、动态（多重模块待机备份，故障是切换备份机）、混合冗余（二者综合）。<br>信息冗余：为检错和纠错在数据中加上一段额外的信息，例如检验码原理。<br>时间冗余：遇到错误是重复执行，例如回滚，重复执行还有错，则转入错误处理逻辑。<br>冗余附加技术：冗余附加技术是指为实现数据结构，信息和时间冗余技术所需的资源和技术，包括程序，指令，数据，存放和调动它们的空间和通道等</p><h3 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h3><p>风险管理两个特性：不确定性（可能发生也可能不发生）、损失（发生会产生恶性后果）。<br>项目风险威胁到项目计划，如果项目风险发生，有可能拖延项目的进度和增加项目的成本，指预算。进度、人员、资源。利益相关者、需求等方面的潜在问题以及它们对软件项目的影响。项目复杂度、规模及结构不确定性也属于项目风险因素。<br>技术风险威胁到要开发软件的质量和交付时间，如果技术风险发生，开发工作就变得很困难或者不可能，只设计、实现、接口、验证和维护等方面的潜在问题。此外，规格说明的歧义性，技术的不确定性，技术陈旧以及“前沿”技术也是技术风险因数。<br>商业风险威胁到要开发软件的生存能力，包括下面五种：</p><ol><li>市场风险：开发了一个没有人真正需要的优良产品或系统。</li><li>策略风险：开发的产品不在符合公司的整体商业策略。</li><li>销售风险：开发了一个销售部门不知道该如何销售的产品。</li><li>管理风险：由于重点的转移或人员变动而失去了高级管理层的支持。</li><li>预算风险：没有得到预算或人员的保证。</li></ol><p>风险管理过程如下：</p><ol><li><p>风险识别：识别出项目中已知和可预测的风险，确定风险的来源，产生的条件，描述风险的特征以及哪些项目可以产生风险。形成一个风险列表。</p></li><li><p>风险预测：又称为风险估计，从两个方面预测风险，即风险可能发生的概率和风险产生的后果，因此有风险曝光度&#x3D;风险发生的可能性*风险发生带来的损失。</p></li><li><p>风险评估：定义风险参照水准，将识别出来的风险评估分类。</p></li><li><p>风险控制：辅助项目组建立处理风险的策略，包括风险避免，风险监控，RMMM计划（风险缓解，监控和管理计划）</p><h3 id="软件度量"><a href="#软件度量" class="headerlink" title="软件度量"></a>软件度量</h3><p>软件的两种属性：外部属性指面向管理者和用户的属性，可直接测量，一般为性能指标。内部属性指软件产品本身的属性，如可靠度等，只能间接测量。<br>McCabe算法：又称为环路复杂度，假设有向图中有向边数为M，节点数为N，则此有向图的环路复杂度为M-N+2。</p><h2 id="三-计算机网络和多媒体"><a href="#三-计算机网络和多媒体" class="headerlink" title="三 计算机网络和多媒体"></a>三 计算机网络和多媒体</h2><h3 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h3><p>计算机网络是计算机技术与通信技术相结合的产物，它实现了远程通信，远程信息处理和资源共享。<br>计算机网络的功能：数据通信，资源共享，负载均衡，高可靠性。<br>计算机网络的分类：</p></li><li><p>局域网（LAN）：传输速率 4Mbps~1Gbps</p></li><li><p>城域网（MAN）：传输速率 50Kbps~100Mbps</p></li><li><p>广域网（WAN）：传输速率 9.6Kbps~45Mbps</p><h3 id="网络的拓扑结构"><a href="#网络的拓扑结构" class="headerlink" title="网络的拓扑结构"></a>网络的拓扑结构</h3><p>总线型（利用率低，干扰大，价格低）<br>星型（交换机形成的局域网，中央单元负荷大）<br>环型（流动方向固定，效率低扩展难）<br>树型（总线型的扩充 ，分级结构）<br>分布式（任意节点连接，管理难成本高）<br><img src="/../../images/rk/%E5%9B%BE%E7%89%877.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%877.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p>从下往上依次是：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层。</p></li><li><p>物理层：二进制数据传输，物理链路和物理特性相关。</p></li><li><p>数据链路层：将数据封装成帧进行传输，准确传送至局域网内的物理主机上。</p></li><li><p>网络层：数据分组传输和路由选择，能准确的将数据传输到互联网的主机上。</p></li><li><p>传输层：端到端的链接，传送数据至主机端口上。</p></li><li><p>会话层：管理主机之间的会话，提供会话管理服务。</p></li><li><p>表示层：提供解释所交换数据的含义的服务，包括数据之间的格式转换，压缩，加密等操作，对数据进行处理。</p></li><li><p>应用层：实现具体的应用功能，直接进程间的通信。</p><h4 id="网络互联硬件"><a href="#网络互联硬件" class="headerlink" title="网络互联硬件"></a>网络互联硬件</h4><p>物理层：中继器（扩大信号），集线器Hub（多路中继器）<br>数据链路层：网桥（分析帧地址），交换机（多路网桥，MAC地址表）<br>网络层：路由器（连接多个逻辑上分开的网络，路由选择）<br>应用层：网关（连接不同类型且协议差别较大的网络，协议转换）<br>传输介质：<br>有线介质：双绞线（ 最大长度100m，每端需要一个RJ45插件），同轴电缆，光纤。<br>无线介质：微波，红外线和激光，卫星通信。</p><h4 id="局域网协议"><a href="#局域网协议" class="headerlink" title="局域网协议"></a>局域网协议</h4><p>IEEE802.3 :标准以太网 速度为10Mbps，传输介质是同轴电缆。<br>IEEE802.3u: 快速以太网 速度为100Mbps 传输介质是双绞线。<br>IEEE802.3z:千兆以太网 速度为1000Mnps 传输介质是光纤或双绞线。</p><h4 id="TCP-x2F-IP协议族"><a href="#TCP-x2F-IP协议族" class="headerlink" title="TCP&#x2F;IP协议族"></a>TCP&#x2F;IP协议族</h4><p>特性：逻辑编址，路由选择，域名解析，错误检测和流量控制。<br>TCP&#x2F;IP分层模型</p></li><li><p>应用层：具体应用功能。</p></li><li><p>传输层：提供应用程序间端对端的通信。</p></li><li><p>网际层：又称IP层，处理机器间的通信，数据以分组为单位。</p></li><li><p>网络接口层：又称数据链路层，负责接收IP数据报，并把数据报通过选定的网络发送出去。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%878.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%878.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h5 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h5><p>IP协议：最重要最核心的协议（无连接，不可靠）<br>ICMP协议：因特网控制信息协议，检测网络通信顺畅<br>ARP协议和RARP协议：地址解析协议和反地址解析协议<br>ARP   IP地址 -&gt; 物理地址<br>RARP   物理地址 -&gt;IP地址</p><h5 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h5><p>&#x3D;&#x3D; UDP协议：不可靠链接， 一般用于视频，音频传输<br>TCP协议：可靠连接 （三次握手协议）&#x3D;&#x3D;</p><h5 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h5><p>基于TCP的FTP，HTTP都是可靠传输，基于UDP的DHCP，DNS都是不可靠传输。<br>FTP：文件传输协议（可靠）控制端口为21 传输端口为20<br>HTTP（默认端口80）：超文本传输协议 （可靠）使用SSL加密后为HTTPS（默认端口443）<br>SMTP（发送）和POP3（收取）：邮件传输协议（可靠） 邮件报文采用ASCLL格式表示<br>Telent：远程连接协议（可靠）<br>TFTP：小文件传输协议（不可靠）<br>SNMP：简单网络管理协议（不可靠）<br>DHCP：动态分配IP地址协议（不可靠）客户机&#x2F;服务器模型 默认租期为8天<br>DNS：域名解析协议（不可靠）将域名解析成IP地址</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>分类地址格式：IP地址分为四段，每段八位，共32位二进制数组成。<br>在逻辑上，这32位IP地址分为网络号和主机号，依据网络号位数不同，可以将IP地址分为一下几类：</p></li><li><p>A类：0.0.0.0~127.255.255.255 （八位网络号，主机号位32-8，能分配的主机号个数为2^24-2个，全0和全1不能分配）</p></li><li><p>B类：128.0.0.0~191.255.255.255（16位网络号）</p></li><li><p>C类：192.0.0.0~223.255.255.255（24位网络号）</p></li><li><p>D类组播：224.0.0.0~239.255.255.255</p></li><li><p>E类保留：240.0.0.0~255.255.255.255<br>IPV6地址长度为128位，地址空间增加了2^96倍。</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>防火墙是内部网络和外部因特网之间增加的一道安全防护措施，它认为内部网络是安全的，外部网络是不安全的。分为网络级防火墙和应用级防火墙，两级之间的安全手段如下所示：<br>网络级防火墙（包过滤防火墙）层次低，但是效率高，因为其使用包过滤和状态监测手段，一般只检验网络包外在（起始地址，状态），属性是否异常，若异常，则过滤掉，不与内网通信，因此对用户和应用是透明的。如果遇到伪装的危险数据包就没办法过滤掉。<br>应用及防火墙（代理服务器防火墙）：层次高，效率低，因为应用级防火墙会将网络包拆开，具体检查里面的数据是否有问题，会消耗大量的时间，造成效率低下，但是安全强度高，包括双宿主主机，屏蔽主机网关被屏蔽子网等方法。<br>被屏蔽子网方法，是在内网和外网之间增加了一个屏蔽子网，相当于多了一层网络，称为DMZ（非军事区），这样内网和外网通信必须多经过一道防火墙，屏蔽子网中一般存放的是邮件服务器，WEB服务器这些内外网数据交互的服务器，可以屏蔽掉一些来自内部的攻击，但是完全来自系统内部服务器的攻击还是无法屏蔽掉。</p><h3 id="计算机病毒和木马"><a href="#计算机病毒和木马" class="headerlink" title="计算机病毒和木马"></a>计算机病毒和木马</h3><p>病毒：编制或在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令和或程序代码。病毒具有：传染性，隐蔽性，潜伏性，破坏性，针对性，衍生性，寄生性，未知性。<br>木马：是一种后门程序，常被黑客用作控制远程计算机的工具，隐藏在被控制电脑上的一个小程序监视电脑一切操作并盗取数据。<br>病毒和木马的种类<br>系统引导型病毒<br>文件外壳型病毒<br>目录型病毒<br>蠕虫病毒（感染EXE文件 可执行文件）：熊猫烧香，罗密欧与朱丽叶，恶魔，尼姆达，冲击波<br>木马：QQ消息尾巴木马，特洛伊木马，冰河。<br>宏病毒（感染word，Excel等文件）：美丽沙，台湾一号。<br>CIH病毒：史上唯一破坏硬件的病毒。<br>红色代码（蠕虫病毒+木马）</p><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><p>网络安全的五大要素:保密性，完整性，可用性，可控性，不可抵赖性。</p><h4 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h4><p>重放攻击（ARP）：所截获某次合法的通信数据拷贝，出于非法的目的而被重新发送。<br>拒绝服务（DOS）：对信息或其他资源的合法访问被无条件阻止。<br>旁路控制：攻击者利用系统的安全缺陷或安全性上的脆弱之处获得非授权的权利或特权。<br>授权侵犯：被授权以某一目的使用某一系统或资源的某个人，却将此权限用于其他非授权的目的，也称作“内部攻击”。<br>特洛伊木马：软件中含有一个察觉不出或者无害的程序段，当它被执行时，会破坏用户的安全。<br>窃听：用各种可能合法或非法的手段窃取系统中的信息资源或敏感信息。<br>业务流分析：通过对系统的长时间监听，利用统计分析方法对诸如通信频度，通信的信息流向，通信总量的变化等参数进行研究，从而发现有价值的信息和规律。<br>信息泄露：信息被泄露或透露给某个未授权的实体。<br>破坏信息完整性：数据被非授权的 进行增删，修改或破坏而受到损失。</p><h4 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h4><p>基本概念：<br>明文：实际传输的真正数据。<br>密文：经过加密后的数据。<br>加密：将明文转换为密文的过程。<br>解密：将密文转换为明文的过程。<br>加密算法：一般是公开的。包括两大规则：代换（转换为完全不同的数据），置换（打乱明文顺序，进行重新置换）<br>秘钥：加密和解密过程中使用的密码等，是隐藏的。<br>对称加密技术：对数据加密和解密的秘钥是相同的，也称为共享秘钥加密技术。属于不公开秘钥加密算法。其缺点是加密安全性不高（因为只有一个秘钥）且秘钥分发困难。但是其加密快，适合大数据的加密。<br>常见的对称加密算法如下：<br>DES:替换+移位，56位秘钥，64位数据块，速度快，秘钥易产生。<br>3DES（三重DES或称TDEA）：两个56位秘钥K1,K2<br>加密：K1加密-&gt;K2解密-&gt;K1加密<br>加密：K1解密-&gt;K2加密-&gt;K1解密<br>AES:AES算法是基于排序和置换运算。是美国联邦政府采用的一种区块加密标准。<br>RC-5：RSA数据安全公司的很多产品都使用了RC-5。<br>IDEA算法：128位秘钥，64位数据块，比DES加密性好，对计算机功能要求相对低。<br>非对称加密技术：又称公开秘钥加密技术，非对称加密技术的保密性好，它消除了最终用户交换 秘钥的需要，但加密解密花费的时间长，速度慢，不适合对文件加密，而只适合对少量数据进行加密。<br>公钥体系中，公钥是用于加密和认证，私钥用于解密和签名。<br>常见的非对称加密算法如下：<br>RSA：512位或1024位秘钥，计算量极大，难破解。<br>Elgamal：其基础是Diffie-HEllman秘钥交换算法。<br>ECC：椭圆曲线算法。<br>其他非对称算法：背包算法，Rabin，D-H。</p><h3 id="常见网络诊断命令"><a href="#常见网络诊断命令" class="headerlink" title="常见网络诊断命令"></a>常见网络诊断命令</h3><p>ping：用于检查网络是否连通；<br>tracert( linux: traceroute)：用于确定 IP数据包访问目标所采取的路径，若网络不通，能定位到具体哪个结点不通；<br>ipconfig（linux: ifconfig）：显示TCP&#x2F;IP网络配置值，如：IP地址，MAC地址，网关地址等；<br>nslookup：查询DNS记录；<br>Netstat：用于显示网络连接、路由表和网络接口信息。</p><h3 id="多媒体基本概念"><a href="#多媒体基本概念" class="headerlink" title="多媒体基本概念"></a>多媒体基本概念</h3><p>媒体可分为下面五类：</p></li><li><p>感觉媒体：直接作用于人的感官器官，使人产生直接感觉的媒体。如视觉，听觉，触觉等。</p></li><li><p>表示媒体：指传输感觉媒体的中介媒体，即用于数据交换的编码。如文字，图形，动画，音频，和视频等</p></li><li><p>表现媒体：进行信息输入和信息输出的媒体。如键盘，鼠标和麦克风；显示器，打印机和音响等，</p></li><li><p>存储媒体：存储表示媒体的物理介质，如磁盘，光盘和内存等</p></li><li><p>传输媒体：传输表示媒体的物理介质，如电缆，光纤，双绞线等</p></li></ol><p>声音 人耳能听到的音频信号的频率范围是20Hz~20KHz。<br>声音的采样频率一般为最高频率的两倍，才能保证不失真<br>声音文件格式：.wav 、.snd 、.au 、.aif 、.voc 、.mp3 、.ra 、.mid等</p><h3 id="图形和图像"><a href="#图形和图像" class="headerlink" title="图形和图像"></a>图形和图像</h3><p>颜色三要素：<br>亮度：彩色明暗深浅程度。<br>色调（红，绿）：颜色的类别。<br>饱和度：某一颜色的深浅程度。<br>图像的属性：分辨率（每英寸像素点dpi），像素深度（存储每个像素所使用的的二进制位数）<br>图像文件格式：.bmp、.gif 、.png 、.jpg、.tif、.wmf等<br>图像深度是图像文件记录一个像素点所需要的的位数，显示深度表示显示缓存中记录屏幕上一个点的位数（bit），也即显示器可以显示的颜色数<br>水平分辨率：显示器在横向上具有的像素点数目。<br>垂直分辨率：显示器在纵向上具有的像素点数目。<br>矢量图的基本组成单位是图元，位图的基本组成单位是像素，视频和动画的基本组成单位是帧。</p><h3 id="多媒体计算"><a href="#多媒体计算" class="headerlink" title="多媒体计算"></a>多媒体计算</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%879.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%879.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="四-操作系统"><a href="#四-操作系统" class="headerlink" title="四 操作系统"></a>四 操作系统</h2><h3 id="进程的组成和状态"><a href="#进程的组成和状态" class="headerlink" title="进程的组成和状态"></a>进程的组成和状态</h3><p>进程的组成：进程控制块PCB（唯一标志），程序（描述程序要干什么），数据（存放进程执行是所需数据）。<br>三态图和五态图<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8710.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8710.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>系统自动控制时只有三种状态，人为操作才有五种状态</p><h3 id="前趋图"><a href="#前趋图" class="headerlink" title="前趋图"></a>前趋图</h3><p>前趋图：用来表示哪些任务可以并行执行，哪些任务之间有顺序关系。如下图：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8711.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8711.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>如图可知，A,B,C可以并行执行，而D要等A,B,C执行完了才能执行。</p><h3 id="进程资源图"><a href="#进程资源图" class="headerlink" title="进程资源图"></a>进程资源图</h3><p>进程资源图：用来表示进程和资源之间的分配和请求关系。如下图所示:<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8712.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8712.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>P代表进程，R代表资源，R方框中 有几个圆球就表示有几个这种资源，在图中，R1指向P1，表示R1已经分配了一个资源给P1了，P1指向R2，表示P1还需要一个R2才能执行。<br>阻塞节点：某进程中所请求的资源已全部分配完毕，无法获取所需资源，则该进程被阻塞了无法继续执行，如上图P2。<br>非阻塞节点：某进程所请求的资源还有剩余，可以分配给该进程继续运行。如上图中P1,P3。<br>当一个进程资源图中所有进程都是阻塞节点时，即进入死锁状态。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>当一个进程在等待永远不可能发生的事件时，就会产生死锁，若系统中多个进程出于死锁状态，就会造成系统死锁。<br>死锁产生的必要条件：</p><ol><li>资源互斥</li><li>每个进程占有资源并等待其他资源</li><li>系统不能剥夺进程资源</li><li>进程资源图是一个环路</li></ol><p>死锁产生后，解决措施是打破四大条件，有下列方法：<br>死锁预防：采用某种策略限制并发进程对于资源的请求，破坏死锁的四大条件之一，使系统任何时候都不满足死锁的条件。<br>死锁避免：一般采用银行家算法来避免。银行家算法，就是提前计算出一条不会死锁的资源分配方法，才分配资源，否则不分配资源。<br>死锁检测：允许死锁产生，当系统定时运行一个检测死锁的程序，若检测到系统中发生死锁，则设法加以解除。<br>死锁解除：即死锁发生后的解除办法，如剥夺资源，撤销进程等。<br>死锁计算问题：系统内有你n个进，每个进程需要R个资源，那么其发生死锁的最大资源数为n∗(R−1)n*(R-1)n∗(R−1)。其不发生死锁的最小资源数为n∗(R−1)+1n*(R-1)+1n∗(R−1)+1.</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>传统的线程有两个属性：可拥有资源的独立单位，可独立调度和分配的基本单位。<br>引入线程后，线程是独立调度的最小单位，进程是拥有资源的最小单元。线程可以共享进程的公共数据，全局变量，代码，文件等资源，但不能共享线程独有的资源，如线程的栈指针等标识数据。</p><h2 id="五-数据库技术基础"><a href="#五-数据库技术基础" class="headerlink" title="五 数据库技术基础"></a>五 数据库技术基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>数据库系统DBS：是一个采用了数据库技术，有组织地，动态地存储大量相关数据，方便多用户访问的计算机系统。其由以下四个部分组成：<br>数据库（统一管理，长期存储在计算机内的，有组织的相关数据集合）<br>硬件（构成计算机系统的各种物理设备，包括存储数据所需的外部设备）<br>软件（操作系统，数据库管理系统及应用程序）<br>人员（系统分析和数据库设计人员，应用程序员，最终用户，数据库管理员DBA ）</p><h3 id="三级模式-两级映象"><a href="#三级模式-两级映象" class="headerlink" title="三级模式-两级映象"></a>三级模式-两级映象</h3><p>内模式：内模式也称存储模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方法（存储文件），定义所有的内部记录类型，索引和文件的组织方式。<br>概念模式：概念模式也称模式，就是我们通常使用的基本表，根据应用，需求将物理数据划分一张张表。<br>外模式：对应数据库中视图这个级别，将表进行一定处理后在提供给用户使用。<br>模式&#x2F;内模式映象：存在于概念级和内部级之间，实现了概念模式和内模式之间的相互转换。<br>外模式&#x2F;模式映象：存在于外部级和概念级之间，实现了外模式和概念模式之间的相互转换。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8713.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8713.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>需求分析：即分析数据存储的要求，主要产出物有数据流图，数据字典，需求说明书。<br>概念结构设计：就是设计E-R图，即实体-属性图，与物理实现无关，说明有哪些实体，哪些属性，<br>逻辑结构设计：将E-R图转成关系模式，即转换为实际的表和表中的列属性。<br>物理设计：根据生成的表等概念，生成物理数据库。</p><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><p>E-R模型：即实体-联系模型，使用椭圆表示属性（一般没有），长方形表示实体。菱形表示联系，联系两端要标注联系类型。<br>联系类型：一对一1:1，一对多1：N，多对多N:M。<br>属性分类：简单属性和复合属性（属性是否可以分割），单值属性和多值属性（属性是否有多个取值），NULL属性（无意义），派生属性（可由其他属性得来）。</p><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>关系模型即数据库中常用的表，包括实体的属性，标识出实体的主键和外键。实例如下：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8714.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8714.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>E-R图转换为关系模式：每个实体都对应这种关系模式，联系分为三种：<br>1:1关系中，联系可以放在任意两端的实体中，作为一个属性（要保证1:1的两端要关联）。<br>1:N关系中，联系可以单独作为一个关系模式，也可以在N端中加入1端实体的主键。<br>N:M关系中，联系必须作为一个单独的关系模式，其主键是N和M端的联合主键。</p><h3 id="关系代数运算"><a href="#关系代数运算" class="headerlink" title="关系代数运算"></a>关系代数运算</h3><p>并∪：结果是两张表所有记录的合并，相同记录只显示一次。<br>交∩：结果是两张表中相同的记录。<br>差-：S1-S2，结果是S1表中有而S2表中没有的记录。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8715.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8715.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>笛卡尔积(×):S1×S2，产生的结果包括S1和S2的所有属性列，并且S1中的每条记录依次和S2中所有记录组合成一条记录，最终属性列为S1+S2属性列，记录数为S1*S2记录数。<br>投影(π)：实际是按条件选择某关系模式中的某列，列也可以用数字表示。<br>选择(σ)：实际是按条件选择某关系模式中的某条记录。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8716.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8716.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>自然连接：自然连接的结果是显示全部的属性列，但相同的属性列只显示一次，显示两个关系模式中属性相同且值相同的记录。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8717.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8717.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>给定一个X，能唯一确定一个Y，就称X确定Y，或者说Y依赖于X。<br>函数依赖又可以扩展一下两种规则：<br>部分函数依赖：A可以确定C，（A,B）也可以确定C。（A,B）中的一部分（即A）可以确定C，称为部分函数依赖。<br>传递函数依赖：当A和B不等价时，A可确定B，B可确定C，则A可以确定C，是传递函数依赖。</p><h3 id="键与约束"><a href="#键与约束" class="headerlink" title="键与约束"></a>键与约束</h3><p>超键：能唯一标识此表的属性的组合。<br>候选键：超键中去掉冗余的属性，剩余的属性就是候选键。<br>主键：任选一个候选键，即可作为主键。<br>外键：其他表中的主键。<br>主属性：候选键内的属性为主属性，其他属性为非主属性。<br>实体完整性约束：即主键约束，即主键不能为空，也不能为空。<br>参照完整性约束：即外键约束，外键必须是其他表中已经存在的主键的值，或者为空。<br>用户自定义完整性约束：自定义表达式约束，如年龄限制在0~150。</p><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>第一范式1NF：若关系模式R的没一个分量是不可再分的数据项，则关系模式R∈1NF。<br>第二范式2NF：若关系模式R∈1NF，且每一个非主属性完全依赖主键（不存在部分函数依赖）时，则关系模式R∈2FN。<br>第三范式3NF：若关系模式R∈2FN，且R中没有非主属性传递依赖于候选键时，则关系模式∈3NF。一般解决方式是拆分传递依赖的非主属性为一个新的关系模式。本质就是主键要直接决定所有非主属性，不能通过非主属性间接决定。<br>BC范式BCNF：不存在函数依赖，也不存在传递依赖。</p><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p>事务：由一系列操作组成，这些操作“要么都做，要么什么都不做”，拥有四种特性，如下<br>原子性（操作）：要么全做，要么全不做。<br>一致性（数据）：事务发生后数据是一致的。<br>隔离性（执行）：任一事务的更新操作直到其成功提交的整个过程对其他事务都是不可见的，不同事务之间是隔离的，互不干涉。<br>持续性（改变）：事务操作的结果是持续性的。<br>事务开始begin transaction，事务提交commit ，事务回滚rollback。</p><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><p>所谓并发控制，是指在多用户共享的系统中许多用户可能同时对同一数据进行操作。并发操作带来的问题是数据的不一致性，主要有三类：丢失更新，不可重复读，读脏数据。</p><h4 id="并发控制技术"><a href="#并发控制技术" class="headerlink" title="并发控制技术"></a>并发控制技术</h4><p>并发控制的主要技术是封锁，基本封锁的类型有排他锁（简称X锁或者写锁）和共享锁（简称S锁或者读锁）。<br>排它锁：若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他事务都不能再对A加任何类型的锁，直达T释放A上的锁。<br>共享锁：若事务T对数据对象A加上S锁，则只允许T读取A，但不能修改A，其他事务只能在对A加S锁，直到T释放A上的S锁。这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A进行任何修改。</p><h4 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h4><p>一级封锁协议：事务在修改数据R前必须对其加X锁，直到事务结束才释放。一级封锁协议可以解决丢失更新问题<br>二级封锁协议：在一级封锁协议的基础上，加上事务T在读数据R前必须先对其加S锁，读完后立即释放S锁。二级封锁协议可以解决读脏数据的问题<br>三级封锁协议：在一级封锁协议的基础上，加上事务T在读数据R前必须先对其加S锁，直到事务结束时释放S锁。三级封锁协议除了防止修改和不读“脏”数据外，还进一步防止了不可重复读。</p><h3 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><p>局部数据库位于不同的物理位置，使用一个全局的DBMS将所有局部数据库联网管理，这就是分布式数据库。其体系结构如下图所示：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8718.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8718.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>分片模式<br>水平分片：将表中水平的记录分别存在不同的地方。<br>垂直分片：将表中的垂直的列值分别存在不同的地方。<br>分布式透明性<br>分片透明性，用户或应用程序不需要知道 逻辑上存储的表具体是如何分块存储的。<br>位置透明性：应用程序不关心数据存储物理位置的改变。<br>逻辑透明性：用户或应用程序无需知道局部使用的是哪种数据结构。<br>复制透明性：用户或应用程序不关心复制的数据从何而来。</p><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>数据仓库是一种特殊的数据库，也是按数据库形式存储数据，但是目的不同，数据库经过长时间的运行，里面的数据会越存越多，就会影响数据库的运行效率，对于某些程序而言，很久之前的数据并非必要的，因此，可以删除掉减少数据，增加效率，考虑到删除这些数据比较可惜，因此，一般将这些数据库提取出来保存到另一个数据库中，称为数据仓库。<br>数据仓库的目的不是为了应用，是面向主题的，用来做数据分析，集成不同表，而且是相对稳定的，一般不会做修改，同时会在特定的时间点做大量的插入，反应历史的变化。<br>形成数据仓库后，有两个作用，一个是用来做数据的查询、分析、生成报表，另一个是使用数据挖掘工具对这些历史数据进行挖掘，查询数据之间的关系，发现剩余价值。<br>数据挖掘的分析方法<br>关联分析：关联分析主要用于发现不同事物之间的关联性，即一个事物发生的同时，另一个事物也经常发生。<br>序列分析：序列分析主要用于发现一定时间间隔内接连发生的事件，这些事件构成一个序列，发现的序列应该具有普遍意义。<br>分类分析：分类分析通过分析具有类别的样本特点，得到决定样本属于各种类别的规则或方法。分类分析时首先为每个记录赋予一个标记，即按标记分类记录，然后检查这些标定的记录，描述出这些记录的特征。<br>聚类分析：聚类分析师根据“物以类聚”的原理，将本身没有类别的样本聚集成不同的组，并且对每个这样的组进行描述的过程。</p><h3 id="反规范化技术"><a href="#反规范化技术" class="headerlink" title="反规范化技术"></a>反规范化技术</h3><p>规划化操作可以防止插入异常，更新，删除异常和数据冗余，一般是通过模式分解，将表拆分，来达到这个目的。<br>但是表拆分后，解决了上述异常，却不利于查询，每次查询时，可能都要关联很多表，严重降低了查询效率，因此，有时候需要反规划技术来提高查询效率。<br>技术手段包括：增加派生性冗余列，增加冗余列，重新组表，分割表。<br>主要就是增加冗余，提高查询效率，为规划化操作的逆操作。</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>增 create 删 delete 改 update 查 select<br>数据库查询select…（属性）…from…（表名）…where （条件）<br>分组查询group by 分组是要注意select后的列名要适应分组，having为分组附加条件:select sno,avg from student group by sno having(avg&gt;60)<br>更名运算 as: select sno as “学号” from t1<br>字符串匹配 like，%匹配多个字符，_匹配任意一个字符<br>排序 order by：默认为升序，降序要加关键字desc：select * from order by sno desc。</p><h2 id="六-程序设计语言基础知识"><a href="#六-程序设计语言基础知识" class="headerlink" title="六 程序设计语言基础知识"></a>六 程序设计语言基础知识</h2><p>程序设计语言是为了书写计算机程序而人为设计的符号语言，用于对计算过程进行描述、组织和推导。<br>低级语言：机器语言（计算机硬件只能识别0,1的指令序列），汇编语言。<br>高级语言：功能更强，抽象级别更高，与人们使用的自然语言比较接近。<br>各程序语言的设计特点：</p><ol><li>Fortran语言（科学计算，执行效率高）</li><li>Pascal语言（为教学而开发的，表达能力强，Delphi）</li><li>C语言（指针操作能力强，高效）</li><li>Lisp语言（函数式程序语言，符号处理，人工智能）</li><li>C++语言（面向对象，高效）</li><li>Java语言（面向对象，中间代码，跨平台）</li><li>C#语言（面向对象，中间代码，.net）</li><li>Prolog语言（逻辑推理，简洁性，表达能力，数据库和专家系统）</li></ol><p>解释与编译：都是将高级语言翻译成计算机硬件认可的机器语言加以执行，不同之处在于编译程序生成独立的可执行文件，直接运行，运行时无法控制源程序，效率高。而解释程序不生成可执行文件，可以逐条解释执行，用于调试模式，可以控制源程序，因为还需要控制程序，因此执行速度慢，效率低。<br>程序设计语言组成：语法（一组规则），语义（语法成分的含义），语用（构成语言的各个标记和使用者的关系）。</p><h3 id="程序设计语言的基本成分"><a href="#程序设计语言的基本成分" class="headerlink" title="程序设计语言的基本成分"></a>程序设计语言的基本成分</h3><p>数据成分：指一种程序设计语言数据和数据类型，数据分为常量（程序运行时不可改变），变量（程序运行可以改变），全局变量（存储空间在静态数据区分配），局部变量（存储空间在堆栈区分配）。数据类型有整型，字符型，双精度浮点型，单精度浮点型，布尔型等。<br>运算成分：指明允许使用的运算符号及运算规则。包括算术运算，逻辑运算，关系运算，位运算等。<br>控制成分：指明语言允许表述的控制结构。包括顺序结构，选择结构，循环结构，<br>传输成分：指明语言允许的数据传输方式。如赋值处理，数据的输入输出等。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数：C程序有一个或多个函数组成，每个函数都有一个名字，其中有且仅有一个的main函数作为程序的入口。函数式程序模块的主要成分，是一段具有独立功能的程序。函数涉及三个概念：函数定义，函数声明，函数调用。<br>传值调用：将实参的值传递给形参，形参的改变不会导致调用点所传实参的值改变。实参可以是变量，常量和表达式。<br>传址调用：即引用调用，将实参的地址传递给形参，即相当于实参存储单元的地址引用，因此其值改变的同时就改变的实参的值。实参的值不能为常量，只能是合法的变量或表达式。</p><h3 id="编译程序基本原理"><a href="#编译程序基本原理" class="headerlink" title="编译程序基本原理"></a>编译程序基本原理</h3><p>编译程序的功能是把某高级语言书写的源程序翻译成与之等价的目标程序（汇编语言和机器语言）。编译程序工作过程分为6个阶段，如下图所示：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8719.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8719.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>词法分析：这个阶段的任务是从左到右一个一个字符地读入源程序，即対构成源程序的字符流进行扫描然后根据构词规则识别单词（也称单词符号或符号）<br>语法分析：是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”、“语句”、“表达式”等等，语法分析程序判断源程序在结构上是否正确。<br>语义分析：是编译过程的一个逻辑阶段，语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查。如类型匹配、除法除数不为0等。有分为静态语义错误（在编译阶段能够查找出来）和动态语义错误（只能在运行时发现）<br>中间代码和目标代码生成：中间代码是根据语义分析产生的，需要经过优化链接，最终生成可执行的目标代码。引入中间代码的目的是进行与机器无关的代码优化处理，常用的中间代码有后缀式（逆波兰式）、三元式（三地址码）、四元式、图和树等形式。</p><h3 id="编译程序基本原理-1"><a href="#编译程序基本原理-1" class="headerlink" title="编译程序基本原理"></a>编译程序基本原理</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%8720.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8720.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>主要掌握上述三种表达式即可，其实就是树的三种遍历，一般正常的表达式是中序遍历，即中缀表达式，根据其构造出树，再按题目要求求出前缀或后缀式。<br>简单求法：后缀表达式是从左往右开始，先把表达式加上括号，再依次把运算符加到本层次的括号后面。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8721.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8721.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="文法定义"><a href="#文法定义" class="headerlink" title="文法定义"></a>文法定义</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%8722.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8722.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>终结符：最终结果，不能推导出其他元素。<br>非终结符：能够推导出其他元素。<br>产生式：即非终结符推导出终结符的公式。<br>闭包：概念如下图。一般考察闭包可以为0个的情况代入运算：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8723.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8723.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="正规式"><a href="#正规式" class="headerlink" title="正规式"></a>正规式</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%8724.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8724.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br><img src="/../../images/rk/%E5%9B%BE%E7%89%8725.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8725.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="有限自动机"><a href="#有限自动机" class="headerlink" title="有限自动机"></a>有限自动机</h3><p>确定的有限自动机和不确定的有限自动机：输入一个字符，看是否能得到唯一的后继，若能，则是确定的，否则若得出多个后继，则是不确定的。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8726.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8726.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 id="七-系统开发与运行"><a href="#七-系统开发与运行" class="headerlink" title="七 系统开发与运行"></a>七 系统开发与运行</h2><h3 id="系统分析概述"><a href="#系统分析概述" class="headerlink" title="系统分析概述"></a>系统分析概述</h3><p>系统分析是一种问题的求解技术，它将一个系统分解成各个组成部分，目的是研究各个部分如何工作，交互，以实现其系统目标。<br>目的和任务：系统分析的主要任务是对现行系统进一步详细调查，将调查中所得到的文档资料集中，对组织内部整体管理状况和信息处理过程进行分析，为系统开发提供所需资料，并提交系统方案说明书。<br>系统分析的主要步骤</p><ol><li>认识、理解当前的现实环境，获得当前系统的“物理模型”。</li><li>从当前系统的“物理模型”抽象出当前系统的“逻辑模型”。</li><li>对当前系统的“逻辑模型”进行分析和优化，建立目标系统的“逻辑模型”。</li><li>对目标系统的逻辑模型具体化（物理化），建立目标系统的物理模型。</li></ol><p>系统开发的目的是将现有系统的物理模型转换为目标系统的物理模型。</p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>系统设计基本原理：<br>抽象（重点说明本质问题，忽略非本质方面）<br>模块化（可组合、分解和更换的单元）<br>信息隐蔽（将每个程序的成分隐蔽或封装在一个单一的设计模块中）<br>模块独立（每个模块完成一个相对独立的特定子功能，且与其他模块之间的联系简单）<br>模块的设计要求独立性高，就必须高内聚，低耦合，内聚是指一个模块内部功能之间的相关性，耦合是指多个模块之间的联系。</p><h3 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h3><p>内聚程度从低到高如下表所示：</p><table><thead><tr><th><strong>内聚分类</strong></th><th><strong>定义</strong></th><th><strong>记忆关键字</strong></th></tr></thead><tbody><tr><td>偶然内聚</td><td>一个模块内各处理元素之间没有任何联系</td><td>无直接关系</td></tr><tr><td>逻辑内聚</td><td>模块内执行若干个逻辑上相似的功能，通过参数确定改模块完成哪一个功能</td><td>逻辑相似，参数决定</td></tr><tr><td>时间内聚</td><td>把需要同时执行的动作组合在一起形成模块</td><td>同时执行</td></tr><tr><td>过程内聚</td><td>一个模块完成多个任务，这些任务必须按指定的过程执行</td><td>指定的过程顺序</td></tr><tr><td>通信内聚</td><td>模块内所有处理元素都在同一个数据结构上操作，或者各处理使用相同的输入数据或产生相同的输出数据</td><td>相同的数据结构、形同的输入输出</td></tr><tr><td>顺序内聚</td><td>一个模块中各个处理元素都密切相关于同一功能且必须顺序执行，前一个功能元素的输出就是后一个功能元素的输入</td><td>顺序执行、输入为输出</td></tr><tr><td>功能内聚</td><td>最强的内聚，模块内所有元素共同作用完成一个功能，缺一不可</td><td>共同作用，缺一不可</td></tr></tbody></table><h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>耦合程度从低到高如下表所示：</p><table><thead><tr><th><strong>耦合分类</strong></th><th><strong>定义</strong></th><th><strong>记忆关键字</strong></th></tr></thead><tbody><tr><td>无直接耦合</td><td>两个模块之间没有直接的关系，它们分别从属于不同模块的控制与调用，不传递任何信息</td><td>无直接关系</td></tr><tr><td>数据耦合</td><td>两个模块之间有调用关系，传递的是简单的数据值，相当于高级语言中的值传递</td><td>传递数据值调用</td></tr><tr><td>标记耦合</td><td>两个模块之间传递的是数据结构</td><td>传递数据结构</td></tr><tr><td>控制耦合</td><td>一个模块调用另一个模块时，传递的是控制变量，被调用模块通过该控制变量的值，有选择的执行模块内的某一功能</td><td>控制变量，选择执行某一功能</td></tr><tr><td>外部耦合</td><td>模块间通过软件之外的环境联合（如I&#x2F;O将模块耦合到特定的设备，格式，通信协议）时</td><td>软件外部环境</td></tr><tr><td>公共耦合</td><td>通过一个公共数据环境相互作用的那些模块间的耦合</td><td>公共数据结构</td></tr><tr><td>内容耦合</td><td>当一个模块直接使用另一个模块的内部数据，或通过非正常入口转入另一个内部模块时</td><td>模块内部关联</td></tr></tbody></table><h3 id="系统设计-1"><a href="#系统设计-1" class="headerlink" title="系统设计"></a>系统设计</h3><p>系统设计的主要目的是系统制定蓝图，在各种技术和实施方法中权衡利弊，精心设计，合理的使用各种资源，得出新系统的详细设计方案。<br>步骤：概要设计和详细设计<br>概要设计基本任务：设计软件系统总体结构，数据结构及数据库设计，编写概要设计文档，评审。<br>详细设计基本任务：模块内详细算法设计、模块内数据结构设计，数据库物理设计、其他设计（代码，输入输出格式，用户界面），编写详细设计文档，评审。</p><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><p>按需求内容分类：<br>业务需求:由客户提出的宏观的一个功能需求。<br>用户需求：设计员去调查需求中涉及的每个用户的具体需求。<br>系统需求：经过整合，形成最终的系统需求，包括功能，性能，设计约束三个方面的需求。<br>从客户角度分类：<br>基本需求：需求明确规定的功能。<br>期望需求：除了基本需求外，客户认为理所应当包含在内的其他功能。<br>兴奋需求：客户未要求其他功能需求，会浪费项目开发时间和成本。<br>软件需求分类：<br>功能需求：软件必须完成的基本动作。<br>性能需求：说明软件或人与软件交互的静态或动态数值需求。如系统响应速度，处理速度等。<br>设计约束：受其他硬件标准限制等方面影响。<br>属性：可用性、安全性、可维护性，可移植性。<br>外部接口需求：用户接口，硬件接口，软件接口，通信接口。</p><h3 id="测试基础知识"><a href="#测试基础知识" class="headerlink" title="测试基础知识"></a>测试基础知识</h3><p>系统测试是为了发现错误而执行程序的过程，成功的测试是发现了至今尚未发现的错误的测试。<br>测试原则：<br>应尽早并不断的进行测试。<br>测试工作应该避免由开发软件的人或小组承担。<br>在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期的输出结果。<br>即包含有效、合理的测试用例，也包含不合理、失效的用例。<br>检验程序是否做了该做的事，且是否做了不该做的事。<br>严格按照测试计划执行。<br>妥善保存测试用例和测试计划。<br>测试用例可以重复使用或追加测试。</p><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h3><p>单元测试：对单个模块进行测试，由程序员自己测试模块内部的接口、信息、功能，测试依据是软件详细说明书。在单元测试中，驱动模块（上层）用来调用被测模块，自顶向下的单元测试中不需要另外编写驱动模块，桩模块（底层）用来模拟被测模块所调用的子模块。<br>集成测试：将模块组合起来进行测试，分为一次性组装（简单，节约时间，发现错误少，只适合小项目）和增量式组装（能够发现更多错误，耗时长，又可分为：自顶向下，自底向上，混合式）。<br>确认测试：对已完成的软件进行功能上的测试，分为内部确认测试（无用户情况）、Alpha测试（用户在开发环境下测试），Beat测试（用户在实际使用时进行的测试）、验收测试（用户根据SRS对项目进行验收）。<br>系统测试：对软甲进行性能测试，主要分为三个方面，即负载测试（在极限情况下，系统各项性能指标）、强度测试（系统资源特别低的情况下），容量测试（并发测试，系统可以处理的同时在线的最大用户数）。其他还有可靠性等性能测试，系统测试一般使用黑盒测试方法。<br>回归测试：软件修改错误或者变更后，进行回归测试以验证之前正确的代码是否引入了错误。<br>动态测试：程序运行时测试，分为：<br>黑盒测试法：功能性测试，不了解软件代码结构，根据功能设计用例，测试软件功能。<br>白盒测试法：结构性测试，明确代码流程，根据代码逻辑设计用例，进行用例覆盖。<br>灰盒测试法：即既有黑盒测试，也有白盒测试。<br>静态测试：程序静止时测试，即対代码进行人工审查，分为：<br>桌前检查：程序员检查自己编写的程序，在程序编译后，单元测试前。<br>代码审查：由若干个程序员和测试人员组成评审小组，通过召开程序评审会来进行审查。<br>代码走查：也是采用开会来对代码进行审查，但并非简单的审查代码，而是由测试人员提供用例，让程序员扮演计算机的角色，手动运行测试用例，检查代码逻辑。</p><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><p>自底向上：从最底层模块开始测试，需要编写驱动程序，而后开始逐一合并模块，最终完成整个系统的测试。优点是较早的验证了底层模块。<br>自顶向下：先测试整个系统，需要编写桩程序，而后逐步向下直至最后测试最低层模块。优点是较早的验证了系统的主要控制和判断点。<br>三明治：既有自底向上也有自顶向下的测试方法，二者都包括。兼有二者的优点，缺点是测试工作量大。</p><h3 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h3><p>黑盒测试用例：将程序看做一个黑盒子，只知道输入输出，不知道内部代码，由此设计出测试用例，分为下面几类：<br>等价类划分：把所有的数据按照某种特性进行归类，而后在每类的数据里选取一个即可。等价类测试用例的设计原则：设计一个新的测试用例，使其尽可能多的覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止；设计一个新的测试用例，使其覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类被覆盖为止。<br>边界值划分：将每类的边界值作为测试用例，边界值一般为范围的两断值以及在此范围之外的与此范围间隔最小的两个值，如年龄范围0-150，边界值为0,150，1,151四个。<br>白盒测试用例：知道程序的代码逻辑，按照程序的代码语句，来设计覆盖代码分支的测试用例，覆盖级别从低至高分为下面六种：<br>1.语句覆盖：逻辑代码中所有的语句都要执行一遍，覆盖层级最低，因为执行了所有语句，不代表执行了所有条件判断。<br>2. 判定覆盖：逻辑代码中所有判断语句的条件的真假分支都要覆盖一次。<br>3. 条件覆盖：对于代码中的一个条件，可能是组合的，如a&gt;0&amp;&amp;b&lt;0，判断覆盖只针对此组合条件的真假分支做两个测试用例，而条件覆盖是对每个独立的条件都要做真假分支的测试用例，共可有4个测试用例，层级更高，注意区别，条件覆盖，针对每个条件都要真假覆盖，判定覆盖，只针对一个条件判断语句。<br>4. 判定&#x2F;条件覆盖：使判定中每个条件的所有可能取值（真&#x2F;假）至少出现一次，并且每个判定本身的判定结果（真&#x2F;假）也至少出现一次，即两种覆盖的综合。<br>5. 条件组合覆盖：每个判定条件中条件的各个可能值的组合都至少出现一次。<br>   6. 路径覆盖：逻辑代码中所有可行路径都覆盖了，覆盖层级最高。</p><h2 id="八-标准化知识产权"><a href="#八-标准化知识产权" class="headerlink" title="八 标准化知识产权"></a>八 标准化知识产权</h2><h3 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%8727.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8727.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="单位和个人的著作权归属"><a href="#单位和个人的著作权归属" class="headerlink" title="单位和个人的著作权归属"></a>单位和个人的著作权归属</h3><p><img src="/../../images/rk/%E5%9B%BE%E7%89%8728.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8728.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="单位和委托的区别"><a href="#单位和委托的区别" class="headerlink" title="单位和委托的区别"></a>单位和委托的区别</h3><p>当合同中未规定著作权的归属时，著作权默认归于单位，而在委托创作中，著作权默认归属创作方个人，具体如下：<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8729.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8729.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="侵权判定"><a href="#侵权判定" class="headerlink" title="侵权判定"></a>侵权判定</h3><p>中国公民、法人、或其他组织的作品，无论是否发表，都享有著作权。<br>开发软件所用的思想、处理过程、操作方法或者数学概念不受保护。<br>著作权法不适用下列情形：<br>法律、法规、国家机关的决议、决定、命令和其他具有立法、行政、司法性质的文件及官方正式译文。<br>时事新闻。<br>立法，通用数表，通用表格和公式。<br><img src="/../../images/rk/%E5%9B%BE%E7%89%8730.png" class="lazyload placeholder" data-srcset="/../../images/rk/%E5%9B%BE%E7%89%8730.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h3 id="其他法律细则"><a href="#其他法律细则" class="headerlink" title="其他法律细则"></a>其他法律细则</h3><h4 id="商业秘密"><a href="#商业秘密" class="headerlink" title="商业秘密"></a>商业秘密</h4><p>构成条件：未公开，能权利人带来利益，保密性。<br>商业秘密无固定保密时间，一般由企业自行决定。且不能延长。</p><h4 id="专利权"><a href="#专利权" class="headerlink" title="专利权"></a>专利权</h4><p>期限：发明专利权保护期限为自申请日起20年，实用新型专利权和外观设计专利权保护期限为申请日起10年。<br>专利权谁先申请就归谁，若同一天申请，则双方协商或者以抽签的方式决定。</p><h4 id="商标权"><a href="#商标权" class="headerlink" title="商标权"></a>商标权</h4><p>必须使用注册商标的商品范围包括：国家规定并由国家工商行政管理局公布的人用药物和烟草制品、国家规定并由国家工商行政管理局公布的其他作品。<br>商标权认定方式与专利权类似，也是谁先申请就归谁，如果同一天申请，则谁先使用归谁，若都未使用或同时使用，则由双方协商或者一抽签的方式决定。<br>“近似商标”是指文字、数字、图形、三维标志或者颜色组合等商标的构成要素的发音、视觉、含义或排列顺序及整体结构上虽有一定区别，但又使人难以区分，容易产生混淆的商标。会产生商标侵权，故不能同时注册，由双方协商决定，若协商未果后采用抽签决定。</p><h4 id="引用资料j"><a href="#引用资料j" class="headerlink" title="引用资料j"></a>引用资料j</h4><p>只能引用发表的作品，不能引用未发表的作品；只能限于介绍、评论作品，只要不构成自己作品的主要成分，可适当引用资料，不必征得原作者的同意，不需要向他支付报酬。</p>]]></content>
      
      
      <categories>
          
          <category> 软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池精讲</title>
      <link href="/2022/11/01/xccjj/"/>
      <url>/2022/11/01/xccjj/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是线程池</strong><br>为了避免重复的创建线程 线程池的出现可以让线程复用 通俗的讲 当有任务来的时候 就会像线程池里面拿一个线程 当工作完成后 不是关闭线程 而是归还线程到线程池中<br>这样避免了重复开销 这样就会节省性能和时间</p><p><strong>线程池的核心讲解</strong><br>核心参数<br>corePoolsize : 线程中允许的核心线程数<br>maximumPoolsize : 该线程所允许的最大线程数<br>keepAliveTime : 空余线程的存活时间并不会对所有的线程起作用 如果线程数大于corePoolsize 那么这些线程就不会因为被空闲太久而关闭 除非你调用 allowcorethreadtimeout 方法 这个方法可以使核心线程数也被回收<br>只有当线程池中的线程数大于corePoolSize时keepAliveTime才会起作用,知道线程中的线程数不大于corepoolSIze,<br>unit : 时间单位<br>workQueue : 阻塞队列 在此的作用就是用来存放线程<br>threadFatory: 线程工厂 可以为线程池创建新线程<br>defaultHnadler: 拒绝策略 当线程失败等 如何处理方式</p><p><strong>常见的四种线程池</strong><br>1.FixedThreadPool 有固定的线程池 其中corePoolSize &#x3D; maxinumPoolSize 且keepalivetime 为0 适合线程稳定的场所<br>2.singleThreadPool 固定数量的线程池且数量为1 corePoolSize &#x3D; maxinumPoolSize&#x3D; 1 keepaliveTime &#x3D;0<br>3.cachedThreadPool corePoolSize&#x3D;0 maxiumPoolSize 不停的创建线程<br>4.ScheduledThreadPool 具有定期执行任务功能的线程池</p><p><strong>阻塞队列一览 workQueue</strong><br>1.数组阻塞队列 ArrayBlockingQueue</p><p><a href="https://imgse.com/i/x7pYgs"><img src="https://s1.ax1x.com/2022/11/01/x7pYgs.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/11/01/x7pYgs.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="x7pYgs.png"></a><br><strong>对应线程池队列：</strong><br>有界的任务队列可以使用ArrayBlockingQueue实现。当使用有界队列时，若有新的任务需要执行，如果线程池的实际线程数小于corePoolSize， 则会优先创建新的线程，若大于corePoolSize，则会将新任务假如等待队列。 若等待队列已满，无法加入，在总线程数，不大于maximumPoolSize的前提下，创建新的进程执行任务。若大于maximumPoolSize，则执行拒绝策略。<br>2.延迟队列DelayQueue</p><p><a href="https://imgse.com/i/x7p55D"><img src="https://s1.ax1x.com/2022/11/01/x7p55D.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/11/01/x7p55D.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="x7p55D.png"></a><br>3.链阻塞队列 LinkedBlockingQueue</p><p><a href="https://imgse.com/i/x79SPg"><img src="https://s1.ax1x.com/2022/11/01/x79SPg.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/11/01/x79SPg.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="x79SPg.png"></a><br><strong>对应线程池队列：</strong><br>无界的任务队列可以通过LinkedBlockingQueue类实现。与有界队列相反，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。 当有新的任务到来，系统的线程数小于corePoolSize时，线程池会产生新的线程执行任务，但当系统的线程数达到corePoolSize后，就会继续增加。 若后续仍有新的任务假如，而又没有空闲的线程资源，则任务直接进入对列等待。若任务创建和处理的速度差异很大，无界队列会保持快速增长，直到耗尽系统内存。</p><p>3.同步队列 SynchronousQueue</p><p><a href="https://imgse.com/i/x79VaT"><img src="https://s1.ax1x.com/2022/11/01/x79VaT.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/11/01/x79VaT.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="x79VaT.png"></a><br>SynchronousQueue经常用来,一端或者双端严格遵守”单工”(单工作者)模式的场景,队列的两个操作端分别是productor和consumer.常用于一个productor多个consumer的场景。<br>在ThreadPoolExecutor中,通过Executors创建的cachedThreadPool就是使用此类型队列.已确保,如果现有线程无法接收任务(offer失败),将会创建新的线程来执行.<br><strong>拒绝策略</strong><br>等待队列也已经排满了,再也塞不下新的任务了同时,<br>线程池的max也到达了,无法接续为新任务服务<br>这时我们需要拒绝策略机制合理的处理这个问题.<br>AbortPolicy:直接抛出异常组织系统正常工作<br>CallerRunPolicy：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务<br>DiscardOldestPolicy：丢弃最老的一个请隶，尝试再次提交当前任务<br>DiscardPolicy:直接丢弃任务不予处理也不抛出异常，这是最好的拒绝策略<br>如果需要自定义拒绝簽略可以实现RejectdExceutionHandler接口<br>已上的内置策略均实现了rejectExcutionHandler接口</p><p><strong>线程池运行流程</strong></p><p><a href="https://imgse.com/i/x79QMR"><img src="https://s1.ax1x.com/2022/11/01/x79QMR.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/11/01/x79QMR.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="x79QMR.png"></a></p><p>1.在创建线程池后 等待提交过来的任务请求</p><p>2.当调用execute()方法添加一个请求任务时线程池会做如下判断：</p><p>① 如果正在运行线程数量小于corePoolSize 那么马上创建线程运行这个任务<br>② 如果正在运行的线程数量大于或者等于corePoolSize 那么将任务放入队列<br>③ 如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize 那么还是要创建非核心线程来立刻运行这个任务<br>④ 如果队列满了且正在运行的线程数量大于或者等于maximumPoolSize 那么线程池会启动饱和拒绝策略来执行</p><p>3.当一个线程完成任务时 他会从队列中取下一个任务<br>4.当一个线程无事可做超过一定时间keepAliveTime 时 线程池会判断： 如果当前运行的线程大于corePoolSize那么这个线程就会被停掉<br><strong>线程池在生产中选择哪种</strong><br>1.在生产中我们JDK自带的线程池 一个不用 我们需要自己创建线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p><p>说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，<br>解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题<br>2.线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明：Executors返回的线程池对象的弊端如下：<br>1）FixedThreadPool和SingleThreadPool:允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。<br>2）CachedThreadPool和ScheduledThreadPool:允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p><p><strong>如何合理的配置线程池</strong><br>分为cpu密集型和io密集型</p><p>cpu密集型的意思就是该任务需要大量的计算 而没有阻塞 cpu一直全速运行 CPU密集型任务只有在真正的多核CPU上才能得到加速<br>而在真正的cpu上 无论你开你个线程模拟该任务都不可能得到加速 因为cpu运算能力就那些<br>cpu 密集型任务配置尽可能少的线程数量 一般公式<br>cpu+1个线程的线程池<br>io密集型<br>由于io密集型任务线程并不是一直在执行 则应配置尽可能多的线程 如cpu*2<br>io密集型 即该任务需要大量io 及大量的阻塞<br>在单线程上运行IO密集型的任务会导致大量的cpu运算能力浪费在等待<br>所以在IO密集型任务中使用多线程可以大大的加速程序运行 即使在单核CPU上 这种加速主要是为了利用被浪费掉阻塞时间<br>IO密集型 大部分线程都阻塞 故需要多配置线程<br>参考公式 CPU核数&#x2F;1 -阻塞系数 阻塞系数在0。8-0.9之间<br>比如 8核cpu: 8&#x2F;1-0.9 &#x3D; 80个线程数<br>corePoolSize在很多地方被翻译成核心池大小，其实我的理解这个就是线程池的大小。举个简单的例子：<br>假如有一个工厂，工厂里面有10个工人，每个工人同时只能做一件任务。<br>因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；<br>当10个工人都有任务在做时，如果还来了任务，就把任务进行排队等待；<br>如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；<br>然后就将任务也分配给这4个临时工人做；<br>如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。<br>当这14个工人当中有人空闲时，而新任务增长的速度又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。<br>这个例子中的corePoolSize就是10，而maximumPoolSize就是14（10+4）。<br>也就是说corePoolSize就是线程池大小，maximumPoolSize在我看来是线程池的一种补救措施，即任务量突然过大时的一种补救措施。<br>不过为了方便理解，在本文后面还是将corePoolSize翻译成核心池大小。<br>largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习 Vue，从入门到放弃</title>
      <link href="/2022/11/01/newpapername/"/>
      <url>/2022/11/01/newpapername/</url>
      
        <content type="html"><![CDATA[<h2 id="在-2016-年学-JavaScript-是一种什么样的体验？"><a href="#在-2016-年学-JavaScript-是一种什么样的体验？" class="headerlink" title="在 2016 年学 JavaScript 是一种什么样的体验？"></a><strong><a href="https://zhuanlan.zhihu.com/p/22782487">在 2016 年学 JavaScript 是一种什么样的体验？</a></strong></h2><p>因为之前开发用的版本较低，而学习Vue用的较新版本，本地webpack和node肯定都过时了，为了避免与原有项目冲突，还又安装了虚拟机，然后安装开发环境，vscode是不能少的~~<br>虽然学的有点累，但是不想放弃，希望大家留言讨论下正确的学习Vue 姿势 （从哪里开始，从哪里进阶，多长时间可以玩转项目）<del>感觉官网有点像词典 ㄒoㄒ，最好是有阮一峰老师那种风格的</del>  </p><table><tr><td bgcolor=#03BDFF>生活不止眼前的苟且，还有诗和远方~~原文地址：https://www.cnblogs.com/jying/p/11203138.html作者：一定会去旅行欢迎任何形式的转载，但请务必在文章开始位置使用明显加粗字体注明出处。限于本人水平，如果文章和代码有表述不当之处，还请不吝赐教。</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel源码分析</title>
      <link href="/2022/11/01/sentinel/"/>
      <url>/2022/11/01/sentinel/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Sentinel的基本概念"><a href="#1-Sentinel的基本概念" class="headerlink" title="1.Sentinel的基本概念"></a>1.Sentinel的基本概念</h1><p>Sentinel实现限流、隔离、降级、熔断等功能，本质要做的就是两件事情：</p><ul><li>统计数据：统计某个资源的访问数据（QPS、RT等信息）</li><li>规则判断：判断限流规则、隔离规则、降级规则、熔断规则是否满足</li></ul><p>这里的<strong>资源</strong>就是希望被Sentinel保护的业务，例如项目中定义的controller方法就是默认被Sentinel保护的资源。</p><h2 id="1-1-ProcessorSlotChain"><a href="#1-1-ProcessorSlotChain" class="headerlink" title="1.1.ProcessorSlotChain"></a>1.1.ProcessorSlotChain</h2><p>实现上述功能的核心骨架是一个叫做ProcessorSlotChain的类。这个类基于责任链模式来设计，将不同的功能（限流、降级、系统保护）封装为一个个的Slot，请求进入后逐个执行即可。</p><p>其工作流如图：</p><p><img src="/../../images/image-20210925092845529.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925092845529.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925092845529"></p><p>责任链中的Slot也分为两大类：</p><ul><li>统计数据构建部分（statistic）<ul><li>NodeSelectorSlot：负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树</li><li>ClusterBuilderSlot：负责构建某个资源的ClusterNode，ClusterNode可以保存资源的运行信息（响应时间、QPS、block 数目、线程数、异常数等）以及来源信息（origin名称）</li><li>StatisticSlot：负责统计实时调用数据，包括运行信息、来源信息等</li></ul></li><li>规则判断部分（rule checking）<ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul></li></ul><h2 id="1-2-Node"><a href="#1-2-Node" class="headerlink" title="1.2.Node"></a>1.2.Node</h2><p>Sentinel中的簇点链路是由一个个的Node组成的，Node是一个接口，包括下面的实现：</p><p><img src="/../../images/image-20210925103029924.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925103029924.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925103029924"></p><p>所有的节点都可以记录对资源的访问统计数据，所以都是StatisticNode的子类。</p><p>按照作用分为两类Node：</p><ul><li>DefaultNode：代表链路树中的每一个资源，一个资源出现在不同链路中时，会创建不同的DefaultNode节点。而树的入口节点叫EntranceNode，是一种特殊的DefaultNode</li><li>ClusterNode：代表资源，一个资源不管出现在多少链路中，只会有一个ClusterNode。记录的是当前资源被访问的所有统计数据之和。</li></ul><p>DefaultNode记录的是资源在当前链路中的访问数据，用来实现基于链路模式的限流规则。ClusterNode记录的是资源在所有链路中的访问数据，实现默认模式、关联模式的限流规则。</p><p>例如：我们在一个SpringMVC项目中，有两个业务：</p><ul><li>业务1：controller中的资源<code>/order/query</code>访问了service中的资源<code>/goods</code></li><li>业务2：controller中的资源<code>/order/save</code>访问了service中的资源<code>/goods</code></li></ul><p>创建的链路图如下：</p><p><img src="/../../images/image-20210925104726158.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925104726158.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925104726158"></p><h2 id="1-3-Entry"><a href="#1-3-Entry" class="headerlink" title="1.3.Entry"></a>1.3.Entry</h2><p>默认情况下，Sentinel会将controller中的方法作为被保护资源，那么问题来了，我们该如何将自己的一段代码标记为一个Sentinel的资源呢？</p><p>Sentinel中的资源用Entry来表示。声明Entry的API示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"resourceName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 被保护的业务逻辑</span>  <span class="token comment">// do something here...</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 资源访问阻止，被限流或被降级</span>  <span class="token comment">// 在此处进行相应的处理操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-1-自定义资源"><a href="#1-3-1-自定义资源" class="headerlink" title="1.3.1.自定义资源"></a>1.3.1.自定义资源</h3><p>例如，我们在order-service服务中，将<code>OrderService</code>的<code>queryOrderById()</code>方法标记为一个资源。</p><p>1）首先在order-service中引入sentinel依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--sentinel--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）然后配置Sentinel地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8089</span> <span class="token comment"># 这里我的sentinel用了8089的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）修改OrderService类的queryOrderById方法</p><p>代码这样来实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">queryOrderById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Entry，标记资源，资源名为resource1</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">"resource1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.查询订单，这里是假数据</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">101L</span><span class="token punctuation">,</span> <span class="token number">4999L</span><span class="token punctuation">,</span> <span class="token string">"小米 MIX4"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.查询用户，基于Feign的远程调用</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.设置</span>        order<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.返回</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"被限流或降级"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）访问</p><p>打开浏览器，访问order服务：<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a></p><p>然后打开sentinel控制台，查看簇点链路：</p><p><img src="/../../images/image-20210925113122759.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925113122759.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925113122759"></p><h3 id="1-3-2-基于注解标记资源"><a href="#1-3-2-基于注解标记资源" class="headerlink" title="1.3.2.基于注解标记资源"></a>1.3.2.基于注解标记资源</h3><p>在之前学习Sentinel的时候，我们知道可以通过给方法添加@SentinelResource注解的形式来标记资源。</p><p><img src="/../../images/image-20210925141507603.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925141507603.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925141507603"></p><p>这个是怎么实现的呢？</p><p>来看下我们引入的Sentinel依赖包：</p><p><img src="/../../images/image-20210925115601560.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115601560.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115601560"></p><p>其中的spring.factories声明需要就是自动装配的配置类，内容如下：</p><p><img src="/../../images/image-20210925115740281.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115740281.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115740281"></p><p>我们来看下<code>SentinelAutoConfiguration</code>这个类：</p><p><img src="/../../images/image-20210925141553785.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925141553785.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925141553785"></p><p>可以看到，在这里声明了一个Bean，<code>SentinelResourceAspect</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Aspect for methods with &#123;@link SentinelResource&#125; annotation. * * @author Eric Zhao */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelResourceAspect</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSentinelAspectSupport</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切点是添加了 @SentinelResource注解的类</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.alibaba.csp.sentinel.annotation.SentinelResource)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sentinelResourceAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 环绕增强</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"sentinelResourceAnnotationPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invokeResourceWithSentinel</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取受保护的方法</span>        <span class="token class-name">Method</span> originMethod <span class="token operator">=</span> <span class="token function">resolveMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取 @SentinelResource注解</span>        <span class="token class-name">SentinelResource</span> annotation <span class="token operator">=</span> originMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">SentinelResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Should not go through here.</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Wrong state for SentinelResource annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取注解上的资源名称</span>        <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> originMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EntryType</span> entryType <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">entryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> resourceType <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建资源 Entry</span>            entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> entryType<span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行受保护的方法</span>            <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">handleBlockException</span><span class="token punctuation">(</span>pjp<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptionsToIgnore <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">exceptionsToIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// The ignore list will be checked first.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionsToIgnore<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">exceptionBelongsTo</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> exceptionsToIgnore<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exceptionBelongsTo</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">exceptionsToTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">traceException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">handleFallback</span><span class="token punctuation">(</span>pjp<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// No fallback function can handle the exception, so throw it out.</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，@SentinelResource注解就是一个标记，而Sentinel基于AOP思想，对被标记的方法做环绕增强，完成资源（<code>Entry</code>）的创建。</p><h2 id="1-4-Context"><a href="#1-4-Context" class="headerlink" title="1.4.Context"></a>1.4.Context</h2><p>上一节，我们发现簇点链路中除了controller方法、service方法两个资源外，还多了一个默认的入口节点：</p><p>sentinel_spring_web_context，是一个EntranceNode类型的节点</p><p>这个节点是在初始化Context的时候由Sentinel帮我们创建的。</p><h3 id="1-4-1-什么是Context"><a href="#1-4-1-什么是Context" class="headerlink" title="1.4.1.什么是Context"></a>1.4.1.什么是Context</h3><p>那么，什么是Context呢？</p><ul><li>Context 代表调用链路上下文，贯穿一次调用链路中的所有资源（ <code>Entry</code>），基于ThreadLocal。</li><li>Context 维持着入口节点（<code>entranceNode</code>）、本次调用链路的 curNode（当前资源节点）、调用来源（<code>origin</code>）等信息。</li><li>后续的Slot都可以通过Context拿到DefaultNode或者ClusterNode，从而获取统计数据，完成规则判断</li><li>Context初始化的过程中，会创建EntranceNode，contextName就是EntranceNode的名称</li></ul><p>对应的API如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建context，包含两个参数：context名称、 来源名称</span><span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token string">"contextName"</span><span class="token punctuation">,</span> <span class="token string">"originName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-2-Context的初始化"><a href="#1-4-2-Context的初始化" class="headerlink" title="1.4.2.Context的初始化"></a>1.4.2.Context的初始化</h3><p>那么这个Context又是在何时完成初始化的呢？</p><h4 id="1-4-2-1-自动装配"><a href="#1-4-2-1-自动装配" class="headerlink" title="1.4.2.1.自动装配"></a>1.4.2.1.自动装配</h4><p>来看下我们引入的Sentinel依赖包：</p><p><img src="/../../images/image-20210925115601560.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115601560.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115601560"></p><p>其中的spring.factories声明需要就是自动装配的配置类，内容如下：</p><p><img src="/../../images/image-20210925115740281.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115740281.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115740281"></p><p>我们先看SentinelWebAutoConfiguration这个类：</p><p><img src="/../../images/image-20210925115824345.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115824345.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115824345"></p><p>这个类实现了WebMvcConfigurer，我们知道这个是SpringMVC自定义配置用到的类，可以配置HandlerInterceptor：</p><p><img src="/../../images/image-20210925115946064.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925115946064.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925115946064"></p><p>可以看到这里配置了一个<code>SentinelWebInterceptor</code>的拦截器。</p><p><code>SentinelWebInterceptor</code>的声明如下：</p><p><img src="/../../images/image-20210925120119030.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925120119030.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925120119030"></p><p>发现它继承了<code>AbstractSentinelInterceptor</code>这个类。</p><p><img src="/../../images/image-20210925120221883.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925120221883.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925120221883"></p><p><code>HandlerInterceptor</code>拦截器会拦截一切进入controller的方法，执行<code>preHandle</code>前置拦截方法，而Context的初始化就是在这里完成的。</p><h4 id="1-4-2-2-AbstractSentinelInterceptor"><a href="#1-4-2-2-AbstractSentinelInterceptor" class="headerlink" title="1.4.2.2.AbstractSentinelInterceptor"></a>1.4.2.2.AbstractSentinelInterceptor</h4><p><code>HandlerInterceptor</code>拦截器会拦截一切进入controller的方法，执行<code>preHandle</code>前置拦截方法，而Context的初始化就是在这里完成的。</p><p>我们来看看这个类的<code>preHandle</code>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取资源名称，一般是controller方法的@RequestMapping路径，例如/order/&#123;orderId&#125;</span>        <span class="token class-name">String</span> resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 从request中获取请求来源，将来做 授权规则 判断时会用</span>        <span class="token class-name">String</span> origin <span class="token operator">=</span> <span class="token function">parseOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取 contextName，默认是sentinel_spring_web_context</span>        <span class="token class-name">String</span> contextName <span class="token operator">=</span> <span class="token function">getContextName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 Context</span>        <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>contextName<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建资源，名称就是当前请求的controller方法的映射路径</span>        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> <span class="token class-name">ResourceTypeConstants</span><span class="token punctuation">.</span>COMMON_WEB<span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">handleBlockException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-2-3-ContextUtil"><a href="#1-4-2-3-ContextUtil" class="headerlink" title="1.4.2.3.ContextUtil"></a>1.4.2.3.ContextUtil</h4><p>创建Context的方法就是<code> ContextUtil.enter(contextName, origin);</code></p><p>我们进入该方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>CONTEXT_DEFAULT_NAME<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ContextNameDefineException</span><span class="token punctuation">(</span>            <span class="token string">"The "</span> <span class="token operator">+</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>CONTEXT_DEFAULT_NAME <span class="token operator">+</span> <span class="token string">" can't be permit to defined!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">trueEnter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>trueEnter</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Context</span> <span class="token function">trueEnter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试获取context</span>    <span class="token class-name">Context</span> context <span class="token operator">=</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果为空，开始初始化</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">></span></span> localCacheNameMap <span class="token operator">=</span> contextNameNodeMap<span class="token punctuation">;</span>        <span class="token comment">// 尝试获取入口节点</span>        <span class="token class-name">DefaultNode</span> node <span class="token operator">=</span> localCacheNameMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            LOCK<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> contextNameNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 入口节点为空，初始化入口节点 EntranceNode</span>                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntranceNode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringResourceWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 添加入口节点到 ROOT</span>                    <span class="token class-name">Constants</span><span class="token punctuation">.</span>ROOT<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将入口节点放入缓存</span>                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">></span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>contextNameNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>contextNameNodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                    newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    contextNameNodeMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                LOCK<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 创建Context，参数为：入口节点 和 contextName</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置请求来源 origin</span>        context<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 放入ThreadLocal</span>        contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-ProcessorSlotChain执行流程"><a href="#2-ProcessorSlotChain执行流程" class="headerlink" title="2.ProcessorSlotChain执行流程"></a>2.ProcessorSlotChain执行流程</h1><p>接下来我们跟踪源码，验证下ProcessorSlotChain的执行流程。</p><h2 id="2-1-入口"><a href="#2-1-入口" class="headerlink" title="2.1.入口"></a>2.1.入口</h2><p>首先，回到一切的入口，<code>AbstractSentinelInterceptor</code>类的<code>preHandle</code>方法：</p><p><img src="/../../images/image-20210925142313050.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925142313050.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925142313050"></p><p>还有，<code>SentinelResourceAspect</code>的环绕增强方法：</p><p><img src="/../../images/image-20210925142438552.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925142438552.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925142438552"></p><p>可以看到，任何一个资源必定要执行<code>SphU.entry()</code>这个方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Entry</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> resourceType<span class="token punctuation">,</span> <span class="token class-name">EntryType</span> trafficType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Env</span><span class="token punctuation">.</span>sph<span class="token punctuation">.</span><span class="token function">entryWithType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> trafficType<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继续进入<code>Env.sph.entryWithType(name, resourceType, trafficType, 1, args);</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">entryWithType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> resourceType<span class="token punctuation">,</span> <span class="token class-name">EntryType</span> entryType<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span>                           <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将 资源名称等基本信息 封装为一个 StringResourceWrapper对象</span>    <span class="token class-name">StringResourceWrapper</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringResourceWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> entryType<span class="token punctuation">,</span> resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 继续</span>    <span class="token keyword">return</span> <span class="token function">entryWithPriority</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>entryWithPriority</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Entry</span> <span class="token function">entryWithPriority</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取 Context</span>    <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Using default context.</span>        context <span class="token operator">=</span> <span class="token class-name">InternalContextUtil</span><span class="token punctuation">.</span><span class="token function">internalEnter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span>CONTEXT_DEFAULT_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>、<span class="token comment">// 获取 Slot执行链，同一个资源，会创建一个执行链，放入缓存</span>    <span class="token class-name">ProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> chain <span class="token operator">=</span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 Entry，并将 resource、chain、context 记录在 Entry中</span>    <span class="token class-name">Entry</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行 slotChain</span>        chain<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// This should not happen, unless there are errors existing in Sentinel internal.</span>        <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sentinel unexpected exception"</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，会获取<code>ProcessorSlotChain</code>对象，然后基于chain.entry()开始执行slotChain中的每一个Slot.  而这里创建的是其实现类：DefaultProcessorSlotChain.</p><p>获取ProcessorSlotChain以后会保存到一个Map中，key是ResourceWrapper，值是ProcessorSlotChain.</p><p>所以，<strong>一个资源只会有一个ProcessorSlotChain</strong>.</p><h2 id="2-2-DefaultProcessorSlotChain"><a href="#2-2-DefaultProcessorSlotChain" class="headerlink" title="2.2.DefaultProcessorSlotChain"></a>2.2.DefaultProcessorSlotChain</h2><p>我们进入DefaultProcessorSlotChain的entry方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// first，就是责任链中的第一个 slot</span>    first<span class="token punctuation">.</span><span class="token function">transformEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的first，类型是AbstractLinkedProcessorSlot：</p><p><img src="/../../images/image-20210925144355865.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925144355865.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925144355865"></p><p>看下继承关系：</p><p><img src="/../../images/image-20210925144010507.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925144010507.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925144010507"></p><p>因此，first一定是这些实现类中的一个，按照最早讲的责任链顺序，first应该就是 <code>NodeSelectorSlot</code>。</p><p>不过，既然是基于责任链模式，所以这里只要记住下一个slot就可以了，也就是next：</p><p><img src="/../../images/image-20210925144233302.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925144233302.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925144233302"></p><p>next确实是NodeSelectSlot类型。</p><p>而NodeSelectSlot的next一定是ClusterBuilderSlot，依次类推：</p><p><img src="/../../images/image-20210925101327080.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925101327080.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925101327080"></p><p>责任链就建立起来了。</p><h2 id="2-3-NodeSelectorSlot"><a href="#2-3-NodeSelectorSlot" class="headerlink" title="2.3.NodeSelectorSlot"></a>2.3.NodeSelectorSlot</h2><p>NodeSelectorSlot负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树。</p><p>核心代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 尝试获取 当前资源的 DefaultNode</span>    <span class="token class-name">DefaultNode</span> node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果为空，为当前资源创建一个新的 DefaultNode</span>                node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">></span></span> cacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cacheMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 放入缓存中，注意这里的 key是contextName，</span>                <span class="token comment">// 这样不同链路进入相同资源，就会创建多个 DefaultNode</span>                cacheMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                map <span class="token operator">=</span> cacheMap<span class="token punctuation">;</span>                <span class="token comment">// 当前节点加入上一节点的 child中，这样就构成了调用链路树</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultNode</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getLastNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// context中的curNode（当前节点）设置为新的 node</span>    context<span class="token punctuation">.</span><span class="token function">setCurNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行下一个 slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个Slot完成了这么几件事情：</p><ul><li>为当前资源创建 DefaultNode</li><li>将DefaultNode放入缓存中，key是contextName，这样不同链路入口的请求，将会创建多个DefaultNode，相同链路则只有一个DefaultNode</li><li>将当前资源的DefaultNode设置为上一个资源的childNode</li><li>将当前资源的DefaultNode设置为Context中的curNode（当前节点）</li></ul><p>下一个slot，就是ClusterBuilderSlot</p><h2 id="2-4-ClusterBuilderSlot"><a href="#2-4-ClusterBuilderSlot" class="headerlink" title="2.4.ClusterBuilderSlot"></a>2.4.ClusterBuilderSlot</h2><p>ClusterBuilderSlot负责构建某个资源的ClusterNode，核心代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判空，注意ClusterNode是共享的成员变量，也就是说一个资源只有一个ClusterNode，与链路无关</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clusterNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clusterNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 创建 cluster node.</span>                clusterNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceWrapper</span><span class="token punctuation">,</span> <span class="token class-name">ClusterNode</span><span class="token punctuation">></span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>clusterNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>clusterNodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 放入缓存，可以是nodeId，也就是resource名称</span>                newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clusterNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                clusterNodeMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将资源的 DefaultNode与 ClusterNode关联</span>    node<span class="token punctuation">.</span><span class="token function">setClusterNode</span><span class="token punctuation">(</span>clusterNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录请求来源 origin 将 origin放入 entry</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> originNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getClusterNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrCreateOriginNode</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOriginNode</span><span class="token punctuation">(</span>originNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 继续下一个slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-StatisticSlot"><a href="#2-5-StatisticSlot" class="headerlink" title="2.5.StatisticSlot"></a>2.5.StatisticSlot</h2><p>StatisticSlot负责统计实时调用数据，包括运行信息（访问次数、线程数）、来源信息等。</p><p>StatisticSlot是实现限流的关键，其中基于<strong>滑动时间窗口算法</strong>维护了计数器，统计进入某个资源的请求次数。</p><p>核心代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                   <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 放行到下一个 slot，做限流、降级等判断</span>        <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 请求通过了, 线程计数器 +1 ，用作线程隔离</span>        node<span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 请求计数器 +1 用作限流</span>        node<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果有 origin，来源计数器也都要 +1</span>            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>IN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果是入口资源，还要给全局计数器 +1.</span>            <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE<span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 请求通过后的回调.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlotEntryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultNode</span><span class="token punctuation">></span></span> handler <span class="token operator">:</span> <span class="token class-name">StatisticSlotCallbackRegistry</span><span class="token punctuation">.</span><span class="token function">getEntryCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            handler<span class="token punctuation">.</span><span class="token function">onPass</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 各种异常处理就省略了。。。</span>        context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，需要注意的是，所有的计数+1动作都包括两部分，以<code> node.addPassRequest(count);</code>为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPassRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// DefaultNode的计数器，代表当前链路的 计数器</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ClusterNode计数器，代表当前资源的 总计数器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clusterNode<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体计数方式，我们后续再看。</p><p>接下来，进入规则校验的相关slot了，依次是：</p><ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul><h2 id="2-6-AuthoritySlot"><a href="#2-6-AuthoritySlot" class="headerlink" title="2.6.AuthoritySlot"></a>2.6.AuthoritySlot</h2><p>负责请求来源origin的授权规则判断，如图：</p><p><img src="/../../images/image-20210925152626648.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925152626648.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925152626648"></p><p>核心API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 校验黑白名单</span>    <span class="token function">checkBlackWhiteAuthority</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入下一个 slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>黑白名单校验的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">checkBlackWhiteAuthority</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthorityException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取授权规则</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">AuthorityRule</span><span class="token punctuation">></span><span class="token punctuation">></span></span> authorityRules <span class="token operator">=</span> <span class="token class-name">AuthorityRuleManager</span><span class="token punctuation">.</span><span class="token function">getAuthorityRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>authorityRules <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthorityRule</span><span class="token punctuation">></span></span> rules <span class="token operator">=</span> authorityRules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 遍历规则并判断</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AuthorityRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">AuthorityRuleChecker</span><span class="token punctuation">.</span><span class="token function">passCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 规则不通过，直接抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthorityException</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看下<code>AuthorityRuleChecker.passCheck(rule, context)</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">passCheck</span><span class="token punctuation">(</span><span class="token class-name">AuthorityRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 得到请求来源 origin</span>    <span class="token class-name">String</span> requester <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 来源为空，或者规则为空，都直接放行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requester<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// rule.getLimitApp()得到的就是 白名单 或 黑名单 的字符串，这里先用 indexOf方法判断</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>requester<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> contain <span class="token operator">=</span> pos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果包含 origin，还要进一步做精确判断，把名单列表以","分割，逐个判断</span>        <span class="token keyword">boolean</span> exactlyMatch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> appArray <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> app <span class="token operator">:</span> appArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requester<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                exactlyMatch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        contain <span class="token operator">=</span> exactlyMatch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 如果是黑名单，并且包含origin，则返回false</span>    <span class="token keyword">int</span> strategy <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>AUTHORITY_BLACK <span class="token operator">&amp;&amp;</span> contain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 如果是白名单，并且不包含origin，则返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>AUTHORITY_WHITE <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>contain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 其它情况返回true</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-SystemSlot"><a href="#2-7-SystemSlot" class="headerlink" title="2.7.SystemSlot"></a>2.7.SystemSlot</h2><p>SystemSlot是对系统保护的规则校验：</p><p><img src="/../../images/image-20210925153228036.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925153228036.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925153228036"></p><p>核心API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                   <span class="token keyword">int</span> count<span class="token punctuation">,</span><span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 系统规则校验</span>    <span class="token class-name">SystemRuleManager</span><span class="token punctuation">.</span><span class="token function">checkSystem</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入下一个 slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看下<code>SystemRuleManager.checkSystem(resourceWrapper);</code>的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkSystem</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Ensure the checking switch is on.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>checkSystemStatus<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只针对入口资源做校验，其它直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span>IN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 全局 QPS校验</span>    <span class="token keyword">double</span> currentQps <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE<span class="token punctuation">.</span><span class="token function">successQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentQps <span class="token operator">></span> qps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"qps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 全局 线程数 校验</span>    <span class="token keyword">int</span> currentThread <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE<span class="token punctuation">.</span><span class="token function">curThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentThread <span class="token operator">></span> maxThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 全局平均 RT校验</span>    <span class="token keyword">double</span> rt <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>ENTRY_NODE<span class="token punctuation">.</span><span class="token function">avgRt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rt <span class="token operator">></span> maxRt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 全局 系统负载 校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>highestSystemLoadIsSet <span class="token operator">&amp;&amp;</span> <span class="token function">getCurrentSystemAvgLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> highestSystemLoad<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkBbr</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"load"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 全局 CPU使用率 校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>highestCpuUsageIsSet <span class="token operator">&amp;&amp;</span> <span class="token function">getCurrentCpuUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> highestCpuUsage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SystemBlockException</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-8-ParamFlowSlot"><a href="#2-8-ParamFlowSlot" class="headerlink" title="2.8.ParamFlowSlot"></a>2.8.ParamFlowSlot</h2><p>ParamFlowSlot就是热点参数限流，如图：</p><p><img src="/../../images/image-20210925153719891.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925153719891.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925153719891"></p><p>是针对进入资源的请求，针对不同的请求参数值分别统计QPS的限流方式。</p><ul><li><p>这里的单机阈值，就是最大令牌数量：maxCount</p></li><li><p>这里的统计窗口时长，就是统计时长：duration</p></li></ul><p>含义是每隔duration时间长度内，最多生产maxCount个令牌，上图配置的含义是每1秒钟生产2个令牌。</p><p>核心API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                  <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果没有设置热点规则，直接放行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ParamFlowRuleManager</span><span class="token punctuation">.</span><span class="token function">hasRules</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 热点规则判断</span>    <span class="token function">checkFlow</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 进入下一个 slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-1-令牌桶"><a href="#2-8-1-令牌桶" class="headerlink" title="2.8.1.令牌桶"></a>2.8.1.令牌桶</h3><p>热点规则判断采用了令牌桶算法来实现参数限流，为每一个不同参数值设置令牌桶，Sentinel的令牌桶有两部分组成：</p><p><img src="/../../images/image-20210925163744108.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925163744108.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925163744108"></p><p>这两个Map的key都是请求的参数值，value却不同，其中：</p><ul><li>tokenCounters：用来记录剩余令牌数量</li><li>timeCounters：用来记录上一个请求的时间</li></ul><p>当一个携带参数的请求到来后，基本判断流程是这样的：</p><p><img src="/../../images/sentinel.jpg" class="lazyload placeholder" data-srcset="/../../images/sentinel.jpg" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="sentinel"></p><h2 id="2-9-FlowSlot"><a href="#2-9-FlowSlot" class="headerlink" title="2.9.FlowSlot"></a>2.9.FlowSlot</h2><p>FlowSlot是负责限流规则的判断，如图：</p><p><img src="/../../images/image-20210925172542274.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925172542274.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925172542274"></p><p>包括：</p><ul><li>三种流控模式：直接模式、关联模式、链路模式</li><li>三种流控效果：快速失败、warm up、排队等待</li></ul><p>三种流控模式，从底层<strong>数据统计</strong>角度，分为两类：</p><ul><li>对进入资源的所有请求（ClusterNode）做限流统计：直接模式、关联模式</li><li>对进入资源的部分链路（DefaultNode）做限流统计：链路模式</li></ul><p>三种流控效果，从<strong>限流算法</strong>来看，分为两类：</p><ul><li>滑动时间窗口算法：快速失败、warm up</li><li>漏桶算法：排队等待效果</li></ul><h3 id="2-9-1-核心流程"><a href="#2-9-1-核心流程" class="headerlink" title="2.9.1.核心流程"></a>2.9.1.核心流程</h3><p>核心API如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 限流规则检测</span>    <span class="token function">checkFlow</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 放行</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>checkFlow方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">checkFlow</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// checker是 FlowRuleChecker 类的一个对象</span>    checker<span class="token punctuation">.</span><span class="token function">checkFlow</span><span class="token punctuation">(</span>ruleProvider<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟入FlowRuleChecker：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFlow</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ruleProvider<span class="token punctuation">,</span>                       <span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                      <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleProvider <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取当前资源的所有限流规则</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">></span></span> rules <span class="token operator">=</span> ruleProvider<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FlowRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 遍历，逐个规则做校验</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canPassCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowException</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的FlowRule就是限流规则接口，其中的几个成员变量，刚好对应表单参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRule</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 阈值类型 (0: 线程, 1: QPS).     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>FLOW_GRADE_QPS<span class="token punctuation">;</span>    <span class="token comment">/**     * 阈值.     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> count<span class="token punctuation">;</span>    <span class="token comment">/**     * 三种限流模式.     *     * &#123;@link RuleConstant#STRATEGY_DIRECT&#125; 直连模式;     * &#123;@link RuleConstant#STRATEGY_RELATE&#125; 关联模式;     * &#123;@link RuleConstant#STRATEGY_CHAIN&#125; 链路模式.     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> strategy <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>STRATEGY_DIRECT<span class="token punctuation">;</span>    <span class="token comment">/**     * 关联模式关联的资源名称.     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> refResource<span class="token punctuation">;</span>    <span class="token comment">/**     * 3种流控效果.     * 0. 快速失败, 1. warm up, 2. 排队等待, 3. warm up + 排队等待     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> controlBehavior <span class="token operator">=</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>CONTROL_BEHAVIOR_DEFAULT<span class="token punctuation">;</span><span class="token comment">// 预热时长</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> warmUpPeriodSec <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 队列最大等待时间.     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxQueueingTimeMs <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token comment">// 。。。 略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>校验的逻辑定义在<code>FlowRuleChecker</code>的<code>canPassCheck</code>方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPassCheck</span><span class="token punctuation">(</span><span class="token comment">/*@NonNull*/</span> <span class="token class-name">FlowRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span>                            <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取限流资源名称</span>    <span class="token class-name">String</span> limitApp <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>limitApp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 校验规则</span>    <span class="token keyword">return</span> <span class="token function">passLocalCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>passLocalCheck()</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">passLocalCheck</span><span class="token punctuation">(</span><span class="token class-name">FlowRule</span> rule<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                                      <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span>  <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基于限流模式判断要统计的节点， </span>    <span class="token comment">// 如果是直连模式，关联模式，对ClusterNode统计，如果是链路模式，则对DefaultNode统计</span>    <span class="token class-name">Node</span> selectedNode <span class="token operator">=</span> <span class="token function">selectNodeByRequesterAndStrategy</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 判断规则</span>    <span class="token keyword">return</span> rule<span class="token punctuation">.</span><span class="token function">getRater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canPass</span><span class="token punctuation">(</span>selectedNode<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对规则的判断先要通过<code>FlowRule#getRater()</code>获取流量控制器<code>TrafficShapingController</code>，然后再做限流。</p><p>而<code>TrafficShapingController</code>有3种实现：</p><p><img src="/../../images/image-20210925175221211.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925175221211.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925175221211"></p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>最终的限流判断都在TrafficShapingController的canPass方法中。</p><h3 id="2-9-2-滑动时间窗口"><a href="#2-9-2-滑动时间窗口" class="headerlink" title="2.9.2.滑动时间窗口"></a>2.9.2.滑动时间窗口</h3><p>滑动时间窗口的功能分两部分来看：</p><ul><li>一是时间区间窗口的QPS计数功能，这个是在StatisticSlot中调用的</li><li>二是对滑动窗口内的时间区间窗口QPS累加，这个是在FlowRule中调用的</li></ul><p>先来看时间区间窗口的QPS计数功能。</p><h4 id="2-9-2-1-时间窗口请求量统计"><a href="#2-9-2-1-时间窗口请求量统计" class="headerlink" title="2.9.2.1.时间窗口请求量统计"></a>2.9.2.1.时间窗口请求量统计</h4><p>回顾2.5章节中的StatisticSlot部分，有这样一段代码：</p><p><img src="/../../images/image-20210925180522926.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925180522926.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925180522926"></p><p>就是在统计通过该节点的QPS，我们跟入看看，这里进入了DefaultNode内部：</p><p><img src="/../../images/image-20210925180619492.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925180619492.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925180619492"></p><p>发现同时对<code>DefaultNode</code>和<code>ClusterNode</code>在做QPS统计，我们知道<code>DefaultNode</code>和<code>ClusterNode</code>都是<code>StatisticNode</code>的子类，这里调用<code>addPassRequest()</code>方法，最终都会进入<code>StatisticNode</code>中。</p><p>随便跟入一个：</p><p><img src="/../../images/image-20210925180810181.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925180810181.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925180810181"></p><p>这里有秒、分两种纬度的统计，对应两个计数器。找到对应的成员变量，可以看到：</p><p><img src="/../../images/image-20210925180954856.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925180954856.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925180954856"></p><p>两个计数器都是ArrayMetric类型，并且传入了两个参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// intervalInMs：是滑动窗口的时间间隔，默认为 1 秒</span><span class="token comment">// sampleCount: 时间窗口的分隔数量，默认为 2，就是把 1秒分为 2个小时间窗</span><span class="token keyword">public</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token keyword">int</span> sampleCount<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OccupiableBucketLeapArray</span><span class="token punctuation">(</span>sampleCount<span class="token punctuation">,</span> intervalInMs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图：</p><p><img src="/../../images/image-20210925181359203.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925181359203.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925181359203"></p><p>接下来，我们进入<code>ArrayMetric</code>类的<code>addPass</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前时间所在的时间窗</span>    <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">></span></span> wrap <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计数器 +1</span>    wrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，计数器如何知道当前所在的窗口是哪个呢？</p><p>这里的data是一个LeapArray：</p><p><img src="/../../images/image-20210925181714605.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925181714605.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925181714605"></p><p>LeapArray的四个属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LeapArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 小窗口的时间长度，默认是500ms ，值 = intervalInMs / sampleCount</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> windowLengthInMs<span class="token punctuation">;</span>    <span class="token comment">// 滑动窗口内的 小窗口 数量，默认为 2</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> sampleCount<span class="token punctuation">;</span>    <span class="token comment">// 滑动窗口的时间间隔，默认为 1000ms</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">;</span>    <span class="token comment">// 滑动窗口的时间间隔，单位为秒，默认为 1</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> intervalInSecond<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LeapArray是一个环形数组，因为时间是无限的，数组长度不可能无限，因此数组中每一个格子放入一个时间窗（window），当数组放满后，角标归0，覆盖最初的window。</p><p><img src="/../../images/image-20210925182127206.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925182127206.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925182127206"></p><p>因为滑动窗口最多分成sampleCount数量的小窗口，因此数组长度只要大于sampleCount，那么最近的一个滑动窗口内的2个小窗口就永远不会被覆盖，就不用担心旧数据被覆盖的问题了。</p><p>我们跟入<code> data.currentWindow();</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 计算当前时间对应的数组角标</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算当前时间所在窗口的开始时间.</span>    <span class="token keyword">long</span> windowStart <span class="token operator">=</span> <span class="token function">calculateWindowStart</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*         * 先根据角标获取数组中保存的 oldWindow 对象，可能是旧数据，需要判断.         *         * (1) oldWindow 不存在, 说明是第一次，创建新 window并存入，然后返回即可         * (2) oldWindow的 starTime = 本次请求的 windowStar, 说明正是要找的窗口，直接返回.         * (3) oldWindow的 starTime &lt; 本次请求的 windowStar, 说明是旧数据，需要被覆盖，创建          *     新窗口，覆盖旧窗口         */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> old <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建新 window</span>            <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 基于CAS写入数组，避免线程安全问题</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 写入成功，返回新的 window</span>                <span class="token keyword">return</span> window<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 写入失败，说明有并发更新，等待其它人更新完成即可</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">==</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> old<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">></span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>updateLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 获取并发锁，覆盖旧窗口并返回</span>                    <span class="token keyword">return</span> <span class="token function">resetWindowTo</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> windowStart<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    updateLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取锁失败，等待其它线程处理就可以了</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&lt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这种情况不应该存在，写这里只是以防万一。</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到当前时间所在窗口（WindowWrap）后，只要调用WindowWrap对象中的add方法，计数器+1即可。</p><p>这里只负责统计每个窗口的请求量，不负责拦截。限流拦截要看FlowSlot中的逻辑。</p><h4 id="2-9-2-2-滑动窗口QPS计算"><a href="#2-9-2-2-滑动窗口QPS计算" class="headerlink" title="2.9.2.2.滑动窗口QPS计算"></a>2.9.2.2.滑动窗口QPS计算</h4><p>在2.9.1小节我们讲过，FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的DefaultController中的canPass方法来分析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算目前为止滑动窗口内已经存在的请求量</span>    <span class="token keyword">int</span> curCount <span class="token operator">=</span> <span class="token function">avgUsedTokens</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断：已使用请求量 + 需要的请求量（1） 是否大于 窗口的请求阈值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curCount <span class="token operator">+</span> acquireCount <span class="token operator">></span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 大于，说明超出阈值，返回false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prioritized <span class="token operator">&amp;&amp;</span> grade <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>FLOW_GRADE_QPS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> currentTime<span class="token punctuation">;</span>            <span class="token keyword">long</span> waitInMs<span class="token punctuation">;</span>            currentTime <span class="token operator">=</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            waitInMs <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">tryOccupyNext</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> acquireCount<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>waitInMs <span class="token operator">&lt;</span> <span class="token class-name">OccupyTimeoutProperty</span><span class="token punctuation">.</span><span class="token function">getOccupyTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">.</span><span class="token function">addWaitingRequest</span><span class="token punctuation">(</span>currentTime <span class="token operator">+</span> waitInMs<span class="token punctuation">,</span> acquireCount<span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">addOccupiedPass</span><span class="token punctuation">(</span>acquireCount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span>waitInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PriorityWaitException</span><span class="token punctuation">(</span>waitInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 小于等于，说明在阈值范围内，返回true</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，判断的关键就是<code>int curCount = avgUsedTokens(node);</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">avgUsedTokens</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> DEFAULT_AVG_USED_TOKENS<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> grade <span class="token operator">==</span> <span class="token class-name">RuleConstant</span><span class="token punctuation">.</span>FLOW_GRADE_THREAD <span class="token operator">?</span> node<span class="token punctuation">.</span><span class="token function">curThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">passQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们采用的是限流，走<code>node.passQps()</code>逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里又进入了 StatisticNode类</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">passQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 请求量 ÷ 滑动窗口时间间隔 ，得到的就是QPS</span>    <span class="token keyword">return</span> rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">getWindowIntervalInSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么<code>rollingCounterInSecond.pass()</code>是如何得到请求量的呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// rollingCounterInSecond 本质是ArrayMetric，之前说过</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前窗口</span>    data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 获取 当前时间的 滑动窗口范围内 的所有小窗口</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MetricBucket</span> window <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 累加求和</span>        pass <span class="token operator">+=</span> window<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回</span>    <span class="token keyword">return</span> pass<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看<code>data.values()</code>如何获取 滑动窗口范围内 的所有小窗口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 此处进入LeapArray类中：</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建空集合，大小等于 LeapArray长度</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历 LeapArray</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取每一个小窗口</span>        <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> windowWrap <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断这个小窗口是否在 滑动窗口时间范围内（1秒内）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWrap <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isWindowDeprecated</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">,</span> windowWrap<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 不在范围内，则跳过</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 在范围内，则添加到集合中</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>windowWrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回集合</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，<code>isWindowDeprecated(timeMillis, windowWrap)</code>又是如何判断窗口是否符合要求呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWindowDeprecated</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> windowWrap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前时间 - 窗口开始时间  是否大于 滑动窗口的最大间隔（1秒）</span>    <span class="token comment">// 也就是说，我们要统计的时 距离当前时间1秒内的 小窗口的 count之和</span>    <span class="token keyword">return</span> time <span class="token operator">-</span> windowWrap<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> intervalInMs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-3-漏桶"><a href="#2-9-3-漏桶" class="headerlink" title="2.9.3.漏桶"></a>2.9.3.漏桶</h3><p>上一节我们讲过，FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的RateLimiterController中的canPass方法来分析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Pass when acquire count is less or equal than 0.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acquireCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 阈值小于等于 0 ，阻止请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 获取当前时间</span>    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算两次请求之间允许的最小时间间隔</span>    <span class="token keyword">long</span> costTime <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>acquireCount<span class="token punctuation">)</span> <span class="token operator">/</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算本次请求 允许执行的时间点 = 最近一次请求的可执行时间 + 两次请求的最小间隔</span>    <span class="token keyword">long</span> expectedTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果允许执行的时间点小于当前时间，说明可以立即执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedTime <span class="token operator">&lt;=</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新上一次的请求的执行时间</span>        latestPassedTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不能立即执行，需要计算 预期等待时长</span>        <span class="token comment">// 预期等待时长 = 两次请求的最小间隔 +最近一次请求的可执行时间 - 当前时间</span>        <span class="token keyword">long</span> waitTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果预期等待时间超出阈值，则拒绝请求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 预期等待时间小于阈值，更新最近一次请求的可执行时间，加上costTime</span>            <span class="token keyword">long</span> oldTime <span class="token operator">=</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 保险起见，再判断一次预期等待时间，是否超过阈值</span>                waitTime <span class="token operator">=</span> oldTime <span class="token operator">-</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果超过，则把刚才 加 的时间再 减回来</span>                    latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 拒绝</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// in race condition waitTime may &lt;= 0</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 预期等待时间在阈值范围内，休眠要等待的时间，醒来后继续执行</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与我们之前分析的漏桶算法基本一致：</p><p><img src="/../../images/image-20210925210716675.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925210716675.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925210716675"></p><h2 id="2-10-DegradeSlot"><a href="#2-10-DegradeSlot" class="headerlink" title="2.10.DegradeSlot"></a>2.10.DegradeSlot</h2><p>最后一关，就是降级规则判断了。</p><p>Sentinel的降级是基于状态机来实现的：</p><p><img src="/../../images/image-20210925211020881.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925211020881.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925211020881"></p><p>对应的实现在DegradeSlot类中，核心API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span>                   <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 熔断降级规则判断</span>    <span class="token function">performChecking</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 继续下一个slot</span>    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续进入<code>performChecking</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">performChecking</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> r<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前资源上的所有的断路器 CircuitBreaker</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CircuitBreaker</span><span class="token punctuation">></span></span> circuitBreakers <span class="token operator">=</span> <span class="token class-name">DegradeRuleManager</span><span class="token punctuation">.</span><span class="token function">getCircuitBreakers</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreakers <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> circuitBreakers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CircuitBreaker</span> cb <span class="token operator">:</span> circuitBreakers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历断路器，逐个判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb<span class="token punctuation">.</span><span class="token function">tryPass</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DegradeException</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span><span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-1-CircuitBreaker"><a href="#2-10-1-CircuitBreaker" class="headerlink" title="2.10.1.CircuitBreaker"></a>2.10.1.CircuitBreaker</h3><p>我们进入CircuitBreaker的tryPass方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryPass</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断状态机状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span>CLOSED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是closed状态，直接放行</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是OPEN状态，断路器打开</span>        <span class="token comment">// 继续判断OPEN时间窗是否结束，如果是则把状态从OPEN切换到 HALF_OPEN，返回true</span>        <span class="token keyword">return</span> <span class="token function">retryTimeoutArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">fromOpenToHalfOpen</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// OPEN状态，并且时间窗未到，返回false</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关时间窗的判断在<code>retryTimeoutArrived()</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">retryTimeoutArrived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前时间 大于 下一次 HalfOpen的重试时间</span>    <span class="token keyword">return</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> nextRetryTimestamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>OPEN到HALF_OPEN切换在<code>fromOpenToHalfOpen(context)</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">fromOpenToHalfOpen</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基于CAS修改状态，从 OPEN到 HALF_OPEN</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span>HALF_OPEN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 状态变更的事件通知</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span>HALF_OPEN<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得到当前资源</span>        <span class="token class-name">Entry</span> entry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给资源设置监听器，在资源Entry销毁时（资源业务执行完毕时）触发</span>        entry<span class="token punctuation">.</span><span class="token function">whenTerminate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span><span class="token punctuation">,</span> <span class="token class-name">Entry</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 判断 资源业务是否异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getBlockError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果异常，则再次进入OPEN状态</span>                    currentState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span>HALF_OPEN<span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span>HALF_OPEN<span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">,</span> <span class="token number">1.0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里出现了从OPEN到HALF_OPEN、从HALF_OPEN到OPEN的变化，但是还有几个没有：</p><ul><li>从CLOSED到OPEN</li><li>从HALF_OPEN到CLOSED</li></ul><h3 id="2-10-2-触发断路器"><a href="#2-10-2-触发断路器" class="headerlink" title="2.10.2.触发断路器"></a>2.10.2.触发断路器</h3><p>请求经过所有插槽 后，一定会执行exit方法，而在DegradeSlot的exit方法中：</p><p><img src="/../../images/image-20210925213440686.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925213440686.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925213440686"></p><p>会调用CircuitBreaker的onRequestComplete方法。而CircuitBreaker有两个实现：</p><p><img src="/../../images/image-20210925213939035.png" class="lazyload placeholder" data-srcset="/../../images/image-20210925213939035.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210925213939035"></p><p>我们这里以异常比例熔断为例来看，进入<code>ExceptionCircuitBreaker</code>的<code>onRequestComplete</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRequestComplete</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取资源 Entry</span>    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 尝试获取 资源中的 异常</span>    <span class="token class-name">Throwable</span> error <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取计数器，同样采用了滑动窗口来计数</span>    <span class="token class-name">SimpleErrorCounter</span> counter <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果出现异常，则 error计数器 +1</span>        counter<span class="token punctuation">.</span><span class="token function">getErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不管是否出现异常，total计数器 +1</span>    counter<span class="token punctuation">.</span><span class="token function">getTotalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断异常比例是否超出阈值</span>    <span class="token function">handleStateChangeWhenThresholdExceeded</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看阈值判断的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleStateChangeWhenThresholdExceeded</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果当前已经是OPEN状态，不做处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 如果已经是 HALF_OPEN 状态，判断是否需求切换状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">.</span>HALF_OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 没有异常，则从 HALF_OPEN 到 CLOSED</span>            <span class="token function">fromHalfOpenToClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 有一次，再次进入OPEN</span>            <span class="token function">fromHalfOpenToOpen</span><span class="token punctuation">(</span><span class="token number">1.0d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 说明当前是CLOSE状态，需要判断是否触发阈值</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleErrorCounter</span><span class="token punctuation">></span></span> counters <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> errCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 累加计算 异常请求数量、总请求数量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleErrorCounter</span> counter <span class="token operator">:</span> counters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        errCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>errorCount<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        totalCount <span class="token operator">+=</span> counter<span class="token punctuation">.</span>totalCount<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果总请求数量未达到阈值，什么都不做</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCount <span class="token operator">&lt;</span> minRequestAmount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> curCount <span class="token operator">=</span> errCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> DEGRADE_GRADE_EXCEPTION_RATIO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 计算请求的异常比例</span>        curCount <span class="token operator">=</span> errCount <span class="token operator">*</span> <span class="token number">1.0d</span> <span class="token operator">/</span> totalCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果比例超过阈值，切换到 OPEN</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curCount <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">transformToOpen</span><span class="token punctuation">(</span>curCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spiderFlow可视化爬虫工具</title>
      <link href="/2022/05/06/spiderFlow/"/>
      <url>/2022/05/06/spiderFlow/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><hr><hr><p>spider-flow 是一个爬虫平台，以图形化方式定义爬虫流程，无需代码即可实现一个爬虫<br><img src="https://s1.ax1x.com/2022/08/04/veCVL4.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCVL4.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="spdierflow_index"><br>详情见<a href="https://www.spiderflow.org/changelog.html">官方文档</a><br>可以下载官方代码包<a href="https://github.com/ssssssss-team/spider-flow">相关代码</a></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><hr><hr><ul><li>支持css选择器、正则提取</li><li>支持JSON&#x2F;XML格式</li><li>支持Xpath&#x2F;JsonPath提取</li><li>支持多数据源（mysql&#x2F;redis&#x2F;mongodb）、SQL select&#x2F;insert&#x2F;update&#x2F;delete</li><li>支持爬取JS动态渲染的页面</li><li>支持代理</li><li>支持二进制格式</li><li>支持保存&#x2F;读取文件(csv、xls、jpg等)</li><li>常用字符串、日期、文件、加解密、随机等函数</li><li>支持流程嵌套</li><li>支持插件扩展(自定义执行器，自定义函数、自定义Controller、类型扩展等）</li><li>支持HTTP接口</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a><strong>插件</strong></h3><hr><hr><ul><li>redis插件</li><li>mongodb插件</li><li>IP代理池插件</li><li>OSS插件</li><li>OCR插件（目前仅支持百度OCR统一文字识别）</li><li>Selenium插件（集成在maven中）</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><hr><hr><p>windows环境的安装很简单，请参考官方文档，下面主要说说linux环境</p><blockquote><p>这里我用的是centos8.2(版本应该影响不大)。其他小伙伴请参考<br>相关的爬虫驱动使用chrome</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;etc&#x2F;centos-release #查看当前版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>####安装chrome</p><pre class="line-numbers language-none"><code class="language-none">curl https:&#x2F;&#x2F;intoli.com&#x2F;install-google-chrome.sh | bashldd &#x2F;opt&#x2F;google&#x2F;chrome&#x2F;chrome | grep &quot;not found&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后，执行如下测试命令，会在当前目录下生成一张百度的图片</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">google-chrome-stable --no-sandbox --headless --disable-gpu --screenshot https://www.baidu.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>####安装 chromedriver</p></li></ol><ul><li><input checked="" disabled="" type="checkbox"> 查看当前chrome浏览器版本  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">google-chrome-stable --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://s1.ax1x.com/2022/08/04/veCKF1.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCKF1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li><input checked="" disabled="" type="checkbox"> 根据指定版本下载chromedriver<br><a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">下载地址</a><br><img src="https://s1.ax1x.com/2022/08/04/veCCiq.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCCiq.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>官方提供的是zip格式，如果服务器不存在请先安装 unzip <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装unzip</span>yum <span class="token function">install</span> <span class="token function">unzip</span><span class="token comment"># 解压</span><span class="token function">unzip</span> chromedriver_linux64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><input checked="" disabled="" type="checkbox"> 建立软连接或者复制、移动过去(推荐直接复制过去，省事)   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s 源地址 /usr/bin/chromedriver<span class="token function">mv</span> chromedriver /usr/bin/chromedriver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>查看chromedriver版本   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chromedriver --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="3"><li>###项目相关配置</li></ol><hr><hr><p>application.properties相关配置</p><ul><li><p><input checked="" disabled="" type="checkbox"> selenium 配置</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置chrome的WebDriver驱动路径，下载地址：http://npm.taobao.org/mirrors/chromedriver/，注意版本问题</span>selenium.driver.chrome<span class="token operator">=</span>/usr/bin/chromedriver<span class="token comment">#设置fireFox的WebDriver驱动路径，下载地址：https://github.com/mozilla/geckodriver/releases</span><span class="token comment">#selenium.driver.firefox=E:/driver/geckodriver.exe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><input checked="" disabled="" type="checkbox"> 定时任务配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置为true时定时任务才生效</span>spider.job.enable<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><input checked="" disabled="" type="checkbox"> 其他数据库地址配置的，相关库需要首先导入<br>项目下的sql文件导入数据库中<br><img src="https://s1.ax1x.com/2022/08/04/veCEyF.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCEyF.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br><em><strong>如果安装了其他插件，如百度ocr，需要另外导入sql，在ocr包下的db目录下</strong></em></p></li></ul><ol start="4"><li>###项目实战<blockquote><p>以下我已爬取80s电影网数据为例子(<a href="https://www.80dytta.com/movie/0-0-0-0-0-1">网站地址</a>)</p></blockquote><ul><li>具体流程图大致为  <ol><li>定义开始节点</li><li>定义请求前变量<br><img src="https://s1.ax1x.com/2022/08/04/veCnoR.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCnoR.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>设置请求配置<br><img src="https://s1.ax1x.com/2022/08/04/ve9vLQ.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/ve9vLQ.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>定义变量获取页面相关返回值<br>具体的语法请参考官方文档 <a href="https://www.spiderflow.org/classes/spiderresponse.html#element">SpiderResponse</a><br><img src="https://s1.ax1x.com/2022/08/04/veCiWV.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCiWV.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>循环设置<br><img src="https://s1.ax1x.com/2022/08/04/ve9jsg.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/ve9jsg.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>定义输出变量，解析每个节点<br>此时 movieList 是一个List<Element>,我们要拿到当前循环的Element，获取电影中我们需要的每个属性<br><img src="https://s1.ax1x.com/2022/08/03/vVRNuj.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/03/vVRNuj.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>输出显示以及入库操作  <ul><li>将根据上一步定义的变量，指定输出。如果需要插入数据库，需要指定数据源。<br><img src="https://s1.ax1x.com/2022/08/04/veC1SK.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veC1SK.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>数据源配置以及数据库设计<div class="gallery ">              <p><img src="https://s1.ax1x.com/2022/08/04/veCQW6.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCQW6.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="数据源配置"><br><img src="https://s1.ax1x.com/2022/08/04/veCAQU.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCAQU.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="表设计">  </p>            </div> <h4 id="测试相关使用"><a href="#测试相关使用" class="headerlink" title="测试相关使用"></a>测试相关使用</h4><div class="gallery ">              <p><img src="https://s1.ax1x.com/2022/08/04/veCeeJ.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCeeJ.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="执行结果">     </p>            </div>可以看到控制台已经输出日志，检查数据库保存情况<br><img src="https://s1.ax1x.com/2022/08/04/veCOt1.png" class="lazyload placeholder" data-srcset="https://s1.ax1x.com/2022/08/04/veCOt1.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="img.png"><br>可以看到相关数据已经成功传入。</li></ul></li></ol></li></ul></li><li><h3 id="其他坑"><a href="#其他坑" class="headerlink" title="其他坑"></a>其他坑</h3><blockquote><p>如果报错死循环了，可能是因为没有配置 死循环监测（默认5000）</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#死循环检测(节点执行次数超过该值时认为是死循环)默认值为5000</span>spider.detect.dead-cycle<span class="token operator">=</span><span class="token number">1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
          <category> 可视化工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos源码分析</title>
      <link href="/2022/03/22/nacosym/"/>
      <url>/2022/03/22/nacosym/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载Nacos源码并运行"><a href="#1-下载Nacos源码并运行" class="headerlink" title="1.下载Nacos源码并运行"></a>1.下载Nacos源码并运行</h1><p>要研究Nacos源码自然不能用打包好的Nacos服务端jar包来运行，需要下载源码自己编译来运行。</p><h2 id="1-1-下载Nacos源码"><a href="#1-1-下载Nacos源码" class="headerlink" title="1.1.下载Nacos源码"></a>1.1.下载Nacos源码</h2><p>Nacos的GitHub地址：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>课前资料中已经提供了下载好的1.4.2版本的Nacos源码：</p><p><img src="/../../images/image-20210906105652113.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906105652113.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906105652113"> </p><p>如果需要研究其他版本的同学，也可以自行下载：</p><p>大家找到其release页面：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E6%89%BE%E5%88%B0%E5%85%B6%E4%B8%AD%E7%9A%841.4.2.%E7%89%88%E6%9C%AC%EF%BC%9A">https://github.com/alibaba/nacos/tags，找到其中的1.4.2.版本：</a></p><p><img src="/../../images/image-20210906105157409.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906105157409.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906105157409"></p><p>点击进入后，下载Source code(zip)：</p><p><img src="/../../images/image-20210906105102668.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906105102668.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906105102668"></p><h2 id="1-2-导入Demo工程"><a href="#1-2-导入Demo工程" class="headerlink" title="1.2.导入Demo工程"></a>1.2.导入Demo工程</h2><p>我们的课前资料提供了一个微服务Demo，包含了服务注册、发现等业务。</p><p><img src="/../../images/image-20210906105858000.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906105858000.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906105858000"> </p><p>导入该项目后，查看其项目结构：</p><p><img src="/../../images/image-20210906110014198.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906110014198.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906110014198"> </p><p>结构说明：</p><ul><li>cloud-source-demo：项目父目录<ul><li>cloud-demo：微服务的父工程，管理微服务依赖<ul><li>order-service：订单微服务，业务中需要访问user-service，是一个服务消费者</li><li>user-service：用户微服务，对外暴露根据id查询用户的接口，是一个服务提供者</li></ul></li></ul></li></ul><h2 id="1-3-导入Nacos源码"><a href="#1-3-导入Nacos源码" class="headerlink" title="1.3.导入Nacos源码"></a>1.3.导入Nacos源码</h2><p>将之前下载好的Nacos源码解压到cloud-source-demo项目目录中：</p><p><img src="/../../images/image-20210906111053263.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111053263.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111053263"> </p><p>然后，使用IDEA将其作为一个module来导入：</p><p>1）选择项目结构选项：</p><p><img src="/../../images/image-20210906111152447.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111152447.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111152447"> </p><p>然后点击导入module：</p><p><img src="/../../images/image-20210906111259352.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111259352.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111259352"> </p><p>在弹出窗口中，选择nacos源码目录：</p><p><img src="/../../images/image-20210906111422406.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111422406.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111422406"></p><p>然后选择maven模块，finish：</p><p><img src="/../../images/image-20210906111519198.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111519198.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111519198"></p><p>最后，点击OK即可：</p><p><img src="/../../images/image-20210906111543747.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111543747.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111543747"></p><p>导入后的项目结构：</p><p><img src="/../../images/image-20210906111632336.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111632336.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111632336"></p><h2 id="1-4-proto编译"><a href="#1-4-proto编译" class="headerlink" title="1.4.proto编译"></a>1.4.proto编译</h2><p>Nacos底层的数据通信会基于protobuf对数据做序列化和反序列化。并将对应的proto文件定义在了consistency这个子模块中：</p><p><img src="/../../images/image-20210906111941399.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906111941399.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906111941399"></p><p>我们需要先将proto文件编译为对应的Java代码。</p><h3 id="1-4-1-什么是protobuf"><a href="#1-4-1-什么是protobuf" class="headerlink" title="1.4.1.什么是protobuf"></a>1.4.1.什么是protobuf</h3><p>protobuf的全称是Protocol Buffer，是Google提供的一种数据序列化协议，这是Google官方的定义：</p><blockquote><p>Protocol Buffers 是一种轻便高效的结构化数据存储格式，可以用于结构化数据序列化，很适合做数据存储或 RPC 数据交换格式。它可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p></blockquote><p>可以简单理解为，是一种跨语言、跨平台的数据传输格式。与json的功能类似，但是无论是性能，还是数据大小都比json要好很多。</p><p>protobuf的之所以可以跨语言，就是因为数据定义的格式为<code>.proto</code>格式，需要基于protoc编译为对应的语言。</p><h3 id="1-4-2-安装protoc"><a href="#1-4-2-安装protoc" class="headerlink" title="1.4.2.安装protoc"></a>1.4.2.安装protoc</h3><p>Protobuf的GitHub地址：<a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p><p>我们可以下载windows版本的来使用：</p><p><img src="/../../images/image-20210906112814549.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906112814549.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906112814549"></p><p>另外，课前资料也提供了下载好的安装包：</p><p><img src="/../../images/image-20210906112920575.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906112920575.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906112920575"> </p><p>解压到任意非中文目录下，其中的bin目录中的protoc.exe可以帮助我们编译：</p><p><img src="/../../images/image-20210906113011871.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906113011871.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906113011871"></p><p>然后将这个bin目录配置到你的环境变量path中，可以参考JDK的配置方式：</p><p><img src="/../../images/image-20210906113552081.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906113552081.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906113552081"></p><h3 id="1-4-3-编译proto"><a href="#1-4-3-编译proto" class="headerlink" title="1.4.3.编译proto"></a>1.4.3.编译proto</h3><p>进入nacos-1.4.2的consistency模块下的src&#x2F;main目录下：</p><p><img src="/../../images/image-20210906113655302.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906113655302.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906113655302"></p><p>然后打开cmd窗口，运行下面的两个命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">protoc <span class="token operator">--</span>java_out=<span class="token punctuation">.</span><span class="token operator">/</span>java <span class="token punctuation">.</span><span class="token operator">/</span>proto/consistency<span class="token punctuation">.</span>protoprotoc <span class="token operator">--</span>java_out=<span class="token punctuation">.</span><span class="token operator">/</span>java <span class="token punctuation">.</span><span class="token operator">/</span>proto/<span class="token keyword">Data</span><span class="token punctuation">.</span>proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图：</p><p><img src="/../../images/image-20210906113829647.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906113829647.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906113829647"></p><p>会在nacos的consistency模块中编译出这些java代码：</p><p><img src="/../../images/image-20210906113923430.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906113923430.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906113923430"></p><h2 id="1-5-运行"><a href="#1-5-运行" class="headerlink" title="1.5.运行"></a>1.5.运行</h2><p>nacos服务端的入口是在console模块中的Nacos类：</p><p><img src="/../../images/image-20210906114035628.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906114035628.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906114035628"> </p><p>我们需要让它单机启动：</p><p><img src="/../../images/image-20210906114143669.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906114143669.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906114143669"> </p><p>然后新建一个SpringBootApplication：</p><p><img src="/../../images/image-20210906114220412.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906114220412.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906114220412"> </p><p>然后填写应用信息：</p><p><img src="/../../images/image-20210906114519073.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906114519073.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906114519073"></p><p>然后运行Nacos这个main函数：</p><p><img src="/../../images/image-20210906114705910.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906114705910.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906114705910"></p><p>将order-service和user-service服务启动后，可以查看nacos控制台：</p><p><img src="/../../images/image-20210906151358154.png" class="lazyload placeholder" data-srcset="/../../images/image-20210906151358154.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210906151358154"></p><h1 id="2-服务注册"><a href="#2-服务注册" class="headerlink" title="2.服务注册"></a>2.服务注册</h1><p>服务注册到Nacos以后，会保存在一个本地注册表中，其结构如下：</p><p><img src="/../../images/image-20210922111651314.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922111651314.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922111651314"></p><p>首先最外层是一个Map，结构为：<code>Map&lt;String, Map&lt;String, Service&gt;&gt;</code>：</p><ul><li>key：是namespace_id，起到环境隔离的作用。namespace下可以有多个group</li><li>value：又是一个<code>Map&lt;String, Service&gt;</code>，代表分组及组内的服务。一个组内可以有多个服务<ul><li>key：代表group分组，不过作为key时格式是group_name:service_name</li><li>value：分组下的某一个服务，例如userservice，用户服务。类型为<code>Service</code>，内部也包含一个<code>Map&lt;String,Cluster&gt;</code>，一个服务下可以有多个集群<ul><li>key：集群名称</li><li>value：<code>Cluster</code>类型，包含集群的具体信息。一个集群中可能包含多个实例，也就是具体的节点信息，其中包含一个<code>Set&lt;Instance&gt;</code>，就是该集群下的实例的集合<ul><li>Instance：实例信息，包含实例的IP、Port、健康状态、权重等等信息</li></ul></li></ul></li></ul></li></ul><p>每一个服务去注册到Nacos时，就会把信息组织并存入这个Map中。</p><h2 id="2-1-服务注册接口"><a href="#2-1-服务注册接口" class="headerlink" title="2.1.服务注册接口"></a>2.1.服务注册接口</h2><p>Nacos提供了服务注册的API接口，客户端只需要向该接口发送请求，即可实现服务注册。</p><p><strong>接口说明：</strong>注册一个实例到Nacos服务。</p><p><strong>请求类型</strong>：<code>POST</code></p><p><strong>请求路径</strong>：<code>/nacos/v1/ns/instance</code></p><p><strong>请求参数</strong>：</p><table><thead><tr><th align="left">名称</th><th align="left">类型</th><th align="left">是否必选</th><th>描述</th></tr></thead><tbody><tr><td align="left">ip</td><td align="left">字符串</td><td align="left">是</td><td>服务实例IP</td></tr><tr><td align="left">port</td><td align="left">int</td><td align="left">是</td><td>服务实例port</td></tr><tr><td align="left">namespaceId</td><td align="left">字符串</td><td align="left">否</td><td>命名空间ID</td></tr><tr><td align="left">weight</td><td align="left">double</td><td align="left">否</td><td>权重</td></tr><tr><td align="left">enabled</td><td align="left">boolean</td><td align="left">否</td><td>是否上线</td></tr><tr><td align="left">healthy</td><td align="left">boolean</td><td align="left">否</td><td>是否健康</td></tr><tr><td align="left">metadata</td><td align="left">字符串</td><td align="left">否</td><td>扩展信息</td></tr><tr><td align="left">clusterName</td><td align="left">字符串</td><td align="left">否</td><td>集群名</td></tr><tr><td align="left">serviceName</td><td align="left">字符串</td><td align="left">是</td><td>服务名</td></tr><tr><td align="left">groupName</td><td align="left">字符串</td><td align="left">否</td><td>分组名</td></tr><tr><td align="left">ephemeral</td><td align="left">boolean</td><td align="left">否</td><td>是否临时实例</td></tr></tbody></table><p><strong>错误编码</strong>：</p><table><thead><tr><th align="left">错误代码</th><th align="left">描述</th><th align="left">语义</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求中的语法错误</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">没有权限</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">无法找到资源</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">正常</td></tr></tbody></table><h2 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2.客户端"></a>2.2.客户端</h2><p>首先，我们需要找到服务注册的入口。</p><h3 id="2-2-1-NacosServiceRegistryAutoConfiguration"><a href="#2-2-1-NacosServiceRegistryAutoConfiguration" class="headerlink" title="2.2.1.NacosServiceRegistryAutoConfiguration"></a>2.2.1.NacosServiceRegistryAutoConfiguration</h3><p>因为Nacos的客户端是基于SpringBoot的自动装配实现的，我们可以在nacos-discovery依赖：</p><p><code>spring-cloud-starter-alibaba-nacos-discovery-2.2.6.RELEASE.jar</code></p><p>这个包中找到Nacos自动装配信息：</p><p><img src="/../../images/image-20210907201333049.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907201333049.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907201333049"></p><p>可以看到，有很多个自动配置类被加载了，其中跟服务注册有关的就是NacosServiceRegistryAutoConfiguration这个类，我们跟入其中。</p><p>可以看到，在NacosServiceRegistryAutoConfiguration这个类中，包含一个跟自动注册有关的Bean：</p><p><img src="/../../images/image-20210907201612322.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907201612322.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907201612322"></p><h3 id="2-2-2-NacosAutoServiceRegistration"><a href="#2-2-2-NacosAutoServiceRegistration" class="headerlink" title="2.2.2.NacosAutoServiceRegistration"></a>2.2.2.NacosAutoServiceRegistration</h3><p><code>NacosAutoServiceRegistration</code>源码如图：</p><p><img src="/../../images/image-20210907213647145.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907213647145.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907213647145"></p><p>可以看到在初始化时，其父类<code>AbstractAutoServiceRegistration</code>也被初始化了。</p><p><code>AbstractAutoServiceRegistration</code>如图：</p><p><img src="/../../images/image-20210907214111801.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907214111801.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907214111801"></p><p>可以看到它实现了<code>ApplicationListener</code>接口，监听Spring容器启动过程中的事件。</p><p>在监听到<code>WebServerInitializedEvent</code>（web服务初始化完成）的事件后，执行了<code>bind</code> 方法。</p><p><img src="/../../images/image-20210907214411267.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907214411267.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907214411267"></p><p>其中的bind方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取 ApplicationContext</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断服务的 namespace,一般都是null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"management"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebServerApplicationContext</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">getServerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录当前 web 服务的端口</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动当前服务注册流程</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的start方法流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Discovery Lifecycle disabled. Not starting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前服务处于未运行状态时，才进行初始化</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发布服务开始注册的事件</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstancePreRegisteredEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ☆☆☆☆开始注册☆☆☆☆</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldRegisterManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">registerManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span class="token comment">// 发布注册完成事件</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstanceRegisteredEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 服务状态设置为运行状态，基于AtomicBoolean</span><span class="token keyword">this</span><span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中最关键的register()方法就是完成服务注册的关键，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>serviceRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此处的this.serviceRegistry就是NacosServiceRegistry：</p><p><img src="/../../images/image-20210907215903335.png" class="lazyload placeholder" data-srcset="/../../images/image-20210907215903335.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210907215903335"></p><h3 id="2-2-3-NacosServiceRegistry"><a href="#2-2-3-NacosServiceRegistry" class="headerlink" title="2.2.3.NacosServiceRegistry"></a>2.2.3.NacosServiceRegistry</h3><p><code>NacosServiceRegistry</code>是Spring的<code>ServiceRegistry</code>接口的实现类，而ServiceRegistry接口是服务注册、发现的规约接口，定义了register、deregister等方法的声明。</p><p>而<code>NacosServiceRegistry</code>对<code>register</code>的实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Registration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 判断serviceId是否为空，也就是spring.application.name不能为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>registration<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No service to register for nacos client..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取Nacos的命名服务，其实就是注册中心服务</span>    <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> <span class="token function">namingService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取 serviceId 和 Group</span>    <span class="token class-name">String</span> serviceId <span class="token operator">=</span> registration<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> group <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 封装服务实例的基本信息，如 cluster-name、是否为临时实例、权重、IP、端口等</span>    <span class="token class-name">Instance</span> instance <span class="token operator">=</span> <span class="token function">getNacosInstanceFromRegistration</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 开始注册服务</span>        namingService<span class="token punctuation">.</span><span class="token function">registerInstance</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">,</span> group<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"nacos registry, &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; register finished"</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> serviceId<span class="token punctuation">,</span>                 instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">isFailFast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"nacos registry, &#123;&#125; register failed...&#123;&#125;,"</span><span class="token punctuation">,</span> serviceId<span class="token punctuation">,</span>                      registration<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rethrowRuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failfast is false. &#123;&#125; register failed...&#123;&#125;,"</span><span class="token punctuation">,</span> serviceId<span class="token punctuation">,</span>                     registration<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到方法中最终是调用NamingService的registerInstance方法实现注册的。</p><p>而NamingService接口的默认实现就是NacosNamingService。</p><h3 id="2-2-4-NacosNamingService"><a href="#2-2-4-NacosNamingService" class="headerlink" title="2.2.4.NacosNamingService"></a>2.2.4.NacosNamingService</h3><p>NacosNamingService提供了服务注册、订阅等功能。</p><p>其中registerInstance就是注册服务实例，源码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查超时参数是否异常。心跳超时时间(默认15秒)必须大于心跳周期(默认5秒)</span>    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkInstanceIsLegal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 拼接得到新的服务名，格式为：groupName@@serviceId</span>    <span class="token class-name">String</span> groupedServiceName <span class="token operator">=</span> <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断是否为临时实例，默认为 true。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是临时实例，需要定时向 Nacos 服务发送心跳</span>        <span class="token class-name">BeatInfo</span> beatInfo <span class="token operator">=</span> beatReactor<span class="token punctuation">.</span><span class="token function">buildBeatInfo</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        beatReactor<span class="token punctuation">.</span><span class="token function">addBeatInfo</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发送注册服务实例的请求</span>    serverProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，由NacosProxy的registerService方法，完成服务注册。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[REGISTER-SERVICE] &#123;&#125; registering service &#123;&#125; with instance: &#123;&#125;"</span><span class="token punctuation">,</span> namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span>                       instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 组织请求参数</span>    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> namespaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>GROUP_NAME<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CLUSTER_NAME<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"weight"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"enable"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"healthy"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ephemeral"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"metadata"</span><span class="token punctuation">,</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过POST请求将上述参数，发送到 /nacos/v1/ns/instance</span>    <span class="token function">reqApi</span><span class="token punctuation">(</span><span class="token class-name">UtilAndComs</span><span class="token punctuation">.</span>nacosUrlInstance<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里提交的信息就是Nacos服务注册接口需要的完整参数，核心参数有：</p><ul><li>namespace_id：环境</li><li>service_name：服务名称</li><li>group_name：组名称</li><li>cluster_name：集群名称</li><li>ip: 当前实例的ip地址</li><li>port: 当前实例的端口</li></ul><p>而在NacosNamingService的registerInstance方法中，有一段是与服务心跳有关的代码，我们在后续会继续学习。</p><p><img src="/../../images/image-20210908141019175.png" class="lazyload placeholder" data-srcset="/../../images/image-20210908141019175.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210908141019175"></p><h3 id="2-2-5-客户端注册的流程图"><a href="#2-2-5-客户端注册的流程图" class="headerlink" title="2.2.5.客户端注册的流程图"></a>2.2.5.客户端注册的流程图</h3><p>如图：</p><p><img src="/../../images/image-20210923185331470.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923185331470.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923185331470"></p><h2 id="2-3-服务端"><a href="#2-3-服务端" class="headerlink" title="2.3.服务端"></a>2.3.服务端</h2><p>在nacos-console的模块中，会引入nacos-naming这个模块：</p><p><img src="/../../images/image-20210922112801808.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922112801808.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922112801808"></p><p>模块结构如下：</p><p><img src="/../../images/image-20210922112954630.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922112954630.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922112954630"></p><p>其中的com.alibaba.nacos.naming.controllers包下就有服务注册、发现等相关的各种接口，其中的服务注册是在<code>InstanceController</code>类中：</p><p><img src="/../../images/image-20210922113158618.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922113158618.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922113158618"></p><h3 id="2-3-1-InstanceController"><a href="#2-3-1-InstanceController" class="headerlink" title="2.3.1.InstanceController"></a>2.3.1.InstanceController</h3><p>进入InstanceController类，可以看到一个register方法，就是服务注册的方法了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CanDistro</span><span class="token annotation punctuation">@PostMapping</span><span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span>parser <span class="token operator">=</span> <span class="token class-name">NamingResourceParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token class-name">ActionTypes</span><span class="token punctuation">.</span>WRITE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// 尝试获取namespaceId</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> namespaceId <span class="token operator">=</span> <span class="token class-name">WebUtils</span>        <span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_NAMESPACE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 尝试获取serviceName，其格式为 group_name@@service_name</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> serviceName <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkServiceNameFormat</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析出实例信息，封装为Instance对象</span>    <span class="token keyword">final</span> <span class="token class-name">Instance</span> instance <span class="token operator">=</span> <span class="token function">parseInstance</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册实例</span>    serviceManager<span class="token punctuation">.</span><span class="token function">registerInstance</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，进入到了serviceManager.registerInstance()方法中。</p><h3 id="2-3-2-ServiceManager"><a href="#2-3-2-ServiceManager" class="headerlink" title="2.3.2.ServiceManager"></a>2.3.2.ServiceManager</h3><p>ServiceManager就是Nacos中管理服务、实例信息的核心API，其中就包含Nacos的服务注册表：</p><p><img src="/../../images/image-20210922141703128.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922141703128.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922141703128"></p><p>而其中的registerInstance方法就是注册服务实例的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Register an instance to a service in AP mode.     *     * &lt;p>This method creates service or cluster silently if they don't exist.     *     * @param namespaceId id of namespace     * @param serviceName service name     * @param instance    instance to register     * @throws Exception any error occurred in the process     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建一个空的service（如果是第一次来注册实例，要先创建一个空service出来，放入注册表）</span>    <span class="token comment">// 此时不包含实例信息</span>    <span class="token function">createEmptyService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 拿到创建好的service</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 拿不到则抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span>INVALID_PARAM<span class="token punctuation">,</span>                                 <span class="token string">"service not found, namespace: "</span> <span class="token operator">+</span> namespaceId <span class="token operator">+</span> <span class="token string">", service: "</span> <span class="token operator">+</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加要注册的实例到service中</span>    <span class="token function">addInstance</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建好了服务，接下来就要添加实例到服务中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Add instance to service.     *     * @param namespaceId namespace     * @param serviceName service name     * @param ephemeral   whether instance is ephemeral     * @param ips         instances     * @throws NacosException nacos exception     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ephemeral<span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ips<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 监听服务列表用到的key，服务唯一标识，例如：com.alibaba.nacos.naming.iplist.ephemeral.public##DEFAULT_GROUP@@order-service</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">buildInstanceListKey</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> ephemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取服务</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 同步锁，避免并发修改的安全问题</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1）获取要更新的实例列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instanceList <span class="token operator">=</span> <span class="token function">addIpAddresses</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> ephemeral<span class="token punctuation">,</span> ips<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2）封装实例列表到Instances对象</span>        <span class="token class-name">Instances</span> instances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instances<span class="token punctuation">.</span><span class="token function">setInstanceList</span><span class="token punctuation">(</span>instanceList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3）完成 注册表更新 以及 Nacos集群的数据同步</span>        consistencyService<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> instances<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法中对修改服务列表的动作加锁处理，确保线程安全。而在同步代码块中，包含下面几步：</p><ul><li>1）先获取要更新的实例列表，<code>addIpAddresses(service, ephemeral, ips);</code></li><li>2）然后将更新后的数据封装到<code>Instances</code>对象中，后面更新注册表时使用</li><li>3）最后，调用<code>consistencyService.put()</code>方法完成Nacos集群的数据同步，保证集群一致性。</li></ul><blockquote><p>注意：在第1步的addIPAddress中，会拷贝旧的实例列表，添加新实例到列表中。在第3步中，完成对实例状态更新后，则会用新列表直接覆盖旧实例列表。而在更新过程中，旧实例列表不受影响，用户依然可以读取。</p><p>这样在更新列表状态过程中，无需阻塞用户的读操作，也不会导致用户读取到脏数据，性能比较好。这种方案称为CopyOnWrite方案。</p></blockquote><h4 id="1）更服务列表"><a href="#1）更服务列表" class="headerlink" title="1）更服务列表"></a>1）更服务列表</h4><p>我们来看看实例列表的更新，对应的方法是<code>addIpAddresses(service, ephemeral, ips);</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> <span class="token function">addIpAddresses</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ephemeral<span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ips<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">updateIpAddresses</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>UPDATE_INSTANCE_ACTION_ADD<span class="token punctuation">,</span> ephemeral<span class="token punctuation">,</span> ips<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>继续进入<code>updateIpAddresses</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> <span class="token function">updateIpAddresses</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> action<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ephemeral<span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ips<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 根据namespaceId、serviceName获取当前服务的实例列表，返回值是Datum</span>    <span class="token comment">// 第一次来，肯定是null</span>    <span class="token class-name">Datum</span> datum <span class="token operator">=</span> consistencyService        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">buildInstanceListKey</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getNamespaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ephemeral<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到服务中现有的实例列表</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> currentIPs <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">allIPs</span><span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建map，保存实例列表，key为ip地址，value是Instance对象</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">></span></span> currentInstances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>currentIPs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建Set集合，保存实例的instanceId</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> currentInstanceIds <span class="token operator">=</span> <span class="token class-name">Sets</span><span class="token punctuation">.</span><span class="token function">newHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历要现有的实例列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> currentIPs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 添加到map中</span>        currentInstances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">toIpAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加instanceId到set中</span>        currentInstanceIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建map，用来保存更新后的实例列表</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">></span></span> instanceMap<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>datum <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> datum<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果服务中已经有旧的数据，则先保存旧的实例列表</span>        instanceMap <span class="token operator">=</span> <span class="token function">setValid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Instances</span><span class="token punctuation">)</span> datum<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstanceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果没有旧数据，则直接创建新的map</span>        instanceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ips<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 遍历实例列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> ips<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断服务中是否包含要注册的实例的cluster信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>service<span class="token punctuation">.</span><span class="token function">getClusterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果不包含，创建新的cluster</span>            <span class="token class-name">Cluster</span> cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cluster</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>            cluster<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将集群放入service的注册表</span>            service<span class="token punctuation">.</span><span class="token function">getClusterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG                <span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"cluster: &#123;&#125; not found, ip: &#123;&#125;, will create new cluster with default configuration."</span><span class="token punctuation">,</span>                      instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 删除实例 or 新增实例 ？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>UPDATE_INSTANCE_ACTION_REMOVE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instanceMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getDatumKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 新增实例，instance生成全新的instanceId</span>            <span class="token class-name">Instance</span> oldInstance <span class="token operator">=</span> instanceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getDatumKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldInstance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instance<span class="token punctuation">.</span><span class="token function">setInstanceId</span><span class="token punctuation">(</span>oldInstance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                instance<span class="token punctuation">.</span><span class="token function">setInstanceId</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">generateInstanceId</span><span class="token punctuation">(</span>currentInstanceIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 放入instance列表</span>            instanceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getDatumKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>UPDATE_INSTANCE_ACTION_ADD<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>            <span class="token string">"ip list can not be empty, service: "</span> <span class="token operator">+</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", ip list: "</span> <span class="token operator">+</span> <span class="token class-name">JacksonUtils</span>            <span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>instanceMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 将instanceMap中的所有实例转为List返回</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>instanceMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来讲，就是先获取旧的实例列表，然后把新的实例信息与旧的做对比，新的实例就添加，老的实例同步ID。然后返回最新的实例列表。</p><h4 id="2）Nacos集群一致性"><a href="#2）Nacos集群一致性" class="headerlink" title="2）Nacos集群一致性"></a>2）Nacos集群一致性</h4><p>在完成本地服务列表更新后，Nacos又实现了集群一致性更新，调用的是:</p><p><code>consistencyService.put(key, instances);</code></p><p>这里的ConsistencyService接口，代表集群一致性的接口，有很多中不同实现：</p><p><img src="/../../images/image-20210922161705573.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922161705573.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922161705573"></p><p>我们进入DelegateConsistencyServiceImpl来看：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Record</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据实例是否是临时实例，判断委托对象</span>    <span class="token function">mapConsistencyService</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的<code>mapConsistencyService(key)</code>方法就是选择委托方式的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ConsistencyService</span> <span class="token function">mapConsistencyService</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否是临时实例：</span>    <span class="token comment">// 是，选择 ephemeralConsistencyService，也就是 DistroConsistencyServiceImpl类</span>    <span class="token comment">// 否，选择 persistentConsistencyService，也就是PersistentConsistencyServiceDelegateImpl</span>    <span class="token keyword">return</span> <span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">matchEphemeralKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">?</span> ephemeralConsistencyService <span class="token operator">:</span> persistentConsistencyService<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，所有实例都是临时实例，我们关注DistroConsistencyServiceImpl即可。</p><h3 id="2-3-4-DistroConsistencyServiceImpl"><a href="#2-3-4-DistroConsistencyServiceImpl" class="headerlink" title="2.3.4.DistroConsistencyServiceImpl"></a>2.3.4.DistroConsistencyServiceImpl</h3><p>我们来看临时实例的一致性实现：DistroConsistencyServiceImpl类的put方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Record</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先将要更新的实例信息写入本地实例列表</span>    <span class="token function">onPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 开始集群同步</span>    distroProtocol<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span>INSTANCE_LIST_KEY_PREFIX<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>CHANGE<span class="token punctuation">,</span>                        globalConfig<span class="token punctuation">.</span><span class="token function">getTaskDispatchPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里方法只有两行：</p><ul><li><code>onPut(key, value)</code>：其中value就是Instances，要更新的服务信息。这行主要是基于线程池方式，异步的将Service信息写入注册表中(就是那个多重Map)</li><li><code>distroProtocol.sync()</code>：就是通过Distro协议将数据同步给集群中的其它Nacos节点</li></ul><p>我们先看onPut方法</p><h4 id="2-3-4-1-更新本地实例列表"><a href="#2-3-4-1-更新本地实例列表" class="headerlink" title="2.3.4.1.更新本地实例列表"></a>2.3.4.1.更新本地实例列表</h4><h5 id="1）放入阻塞队列"><a href="#1）放入阻塞队列" class="headerlink" title="1）放入阻塞队列"></a>1）放入阻塞队列</h5><p>onPut方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPut</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Record</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 判断是否是临时实例</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">matchEphemeralInstanceListKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 封装 Instances 信息到 数据集：Datum</span>        <span class="token class-name">Datum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instances</span><span class="token punctuation">></span></span> datum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Datum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datum<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Instances</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>        datum<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        datum<span class="token punctuation">.</span>timestamp<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 放入DataStore</span>        dataStore<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> datum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 放入阻塞队列，这里的 notifier维护了一个阻塞队列，并且基于线程池异步执行队列中的任务</span>    notifier<span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>CHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>notifier的类型就是<code>DistroConsistencyServiceImpl.Notifier</code>，内部维护了一个阻塞队列，存放服务列表变更的事件：</p><p><img src="/../../images/image-20210922180246555.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922180246555.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922180246555"></p><p>addTask时，将任务加入该阻塞队列：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// DistroConsistencyServiceImpl.Notifier类的 addTask 方法：</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> datumKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>services<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> action <span class="token operator">==</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>CHANGE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>CHANGE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        services<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 任务放入阻塞队列</span>    tasks<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2）Notifier异步更新"><a href="#2）Notifier异步更新" class="headerlink" title="2）Notifier异步更新"></a>2）Notifier异步更新</h5><p>同时，notifier还是一个Runnable，通过一个单线程的线程池来不断从阻塞队列中获取任务，执行服务列表的更新。来看下其中的run方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// DistroConsistencyServiceImpl.Notifier类的run方法：</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"distro notifier started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 死循环，不断执行任务。因为是阻塞队列，不会导致CPU负载过高</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从阻塞队列中获取任务</span>            <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">></span></span> pair <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理任务，更新服务列表</span>            <span class="token function">handle</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DISTRO] Error while handling notifying task"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看handle方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// DistroConsistencyServiceImpl.Notifier类的 handle 方法：</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">></span></span> pair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> datumKey <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataOperation</span> action <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        services<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listeners<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 遍历，找到变化的service，这里的 RecordListener就是 Service</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RecordListener</span> listener <span class="token operator">:</span> listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 服务的实例列表CHANGE事件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>CHANGE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 更新服务列表</span>                    listener<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">,</span> dataStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token comment">// 服务的实例列表 DELETE 事件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    listener<span class="token punctuation">.</span><span class="token function">onDelete</span><span class="token punctuation">(</span>datumKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DISTRO] error while notifying listener of key: &#123;&#125;"</span><span class="token punctuation">,</span> datumKey<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO                <span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DISTRO] datum change notified, key: &#123;&#125;, listener count: &#123;&#125;, action: &#123;&#125;"</span><span class="token punctuation">,</span>                       datumKey<span class="token punctuation">,</span> count<span class="token punctuation">,</span> action<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DISTRO] Error while handling notifying task"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3）覆盖实例列表"><a href="#3）覆盖实例列表" class="headerlink" title="3）覆盖实例列表"></a>3）覆盖实例列表</h5><p>而在Service的onChange方法中，就可以看到更新实例列表的逻辑了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Instances</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[NACOS-RAFT] datum is changed, key: &#123;&#125;, value: &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新实例列表</span>    <span class="token function">updateIPs</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getInstanceList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">matchEphemeralInstanceListKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recalculateChecksum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>updateIPs方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateIPs</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 准备一个Map，key是cluster，值是集群下的Instance集合</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ipMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>clusterMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取服务的所有cluster名称</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> clusterName <span class="token operator">:</span> clusterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ipMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历要更新的实例</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DOM] received malformed ip: null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 判断实例是否包含clusterName，没有的话用默认cluster</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                instance<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span><span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>DEFAULT_CLUSTER_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 判断cluster是否存在，不存在则创建新的cluster</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clusterMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG                    <span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"cluster: &#123;&#125; not found, ip: &#123;&#125;, will create new cluster with default configuration."</span><span class="token punctuation">,</span>                          instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Cluster</span> cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cluster</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cluster<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getClusterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 获取当前cluster实例的集合，不存在则创建新的</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> clusterIPs <span class="token operator">=</span> ipMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>clusterIPs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                clusterIPs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ipMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clusterIPs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 添加新的实例到 Instance 集合</span>            clusterIPs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-DOM] failed to process ip: "</span> <span class="token operator">+</span> instance<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> ipMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//make every ip mine</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> entryIPs <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将实例集合更新到 clusterMap（注册表）</span>        clusterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateIps</span><span class="token punctuation">(</span>entryIPs<span class="token punctuation">,</span> ephemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setLastModifiedMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发布服务变更的通知消息</span>    <span class="token function">getPushService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> <span class="token function">allIPs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">toIpAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[IP-UPDATED] namespace: &#123;&#125;, service: &#123;&#125;, ips: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">getNamespaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第45行的代码中：<code>clusterMap.get(entry.getKey()).updateIps(entryIPs, ephemeral);</code></p><p>就是在更新注册表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateIps</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> ips<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ephemeral<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取旧实例列表</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> toUpdateInstances <span class="token operator">=</span> ephemeral <span class="token operator">?</span> ephemeralInstances <span class="token operator">:</span> persistentInstances<span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Instance</span><span class="token punctuation">></span></span> oldIpMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>toUpdateInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> ip <span class="token operator">:</span> toUpdateInstances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        oldIpMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">getDatumKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 检查新加入实例的状态</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> newIPs <span class="token operator">=</span> <span class="token function">subtract</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span> oldIpMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newIPs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; &#123;SYNC&#125; &#123;IP-NEW&#125; cluster: &#123;&#125;, new ips size: &#123;&#125;, content: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newIPs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newIPs<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> ip <span class="token operator">:</span> newIPs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HealthCheckStatus</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 移除要删除的实例</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> deadIPs <span class="token operator">=</span> <span class="token function">subtract</span><span class="token punctuation">(</span>oldIpMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ips<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deadIPs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; &#123;SYNC&#125; &#123;IP-DEAD&#125; cluster: &#123;&#125;, dead ips size: &#123;&#125;, content: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadIPs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadIPs<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> ip <span class="token operator">:</span> deadIPs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HealthCheckStatus</span><span class="token punctuation">.</span><span class="token function">remv</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    toUpdateInstances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接覆盖旧实例列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ephemeral<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ephemeralInstances <span class="token operator">=</span> toUpdateInstances<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        persistentInstances <span class="token operator">=</span> toUpdateInstances<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-4-2-集群数据同步"><a href="#2-3-4-2-集群数据同步" class="headerlink" title="2.3.4.2.集群数据同步"></a>2.3.4.2.集群数据同步</h4><p>在DistroConsistencyServiceImpl的put方法中分为两步：</p><p><img src="/../../images/image-20210922195603450.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922195603450.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922195603450"></p><p>其中的onPut方法已经分析过了。</p><p>下面的distroProtocol.sync()就是集群同步的逻辑了。</p><p>DistroProtocol类的sync方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sync</span><span class="token punctuation">(</span><span class="token class-name">DistroKey</span> distroKey<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span> action<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历 Nacos 集群中除自己以外的其它节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Member</span> each <span class="token operator">:</span> memberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DistroKey</span> distroKeyWithTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">.</span><span class="token function">getResourceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distroKey<span class="token punctuation">.</span><span class="token function">getResourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                      each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定义一个Distro的同步任务</span>        <span class="token class-name">DistroDelayTask</span> distroDelayTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroDelayTask</span><span class="token punctuation">(</span>distroKeyWithTarget<span class="token punctuation">,</span> action<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 交给线程池去执行</span>        distroTaskEngineHolder<span class="token punctuation">.</span><span class="token function">getDelayTaskExecuteEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>distroKeyWithTarget<span class="token punctuation">,</span> distroDelayTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>DISTRO<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[DISTRO-SCHEDULE] &#123;&#125; to &#123;&#125;"</span><span class="token punctuation">,</span> distroKey<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中同步的任务封装为一个<code>DistroDelayTask</code>对象。</p><p>交给了<code>distroTaskEngineHolder.getDelayTaskExecuteEngine()</code>执行，这行代码的返回值是：</p><p><code>NacosDelayTaskExecuteEngine</code>，这个类维护了一个线程池，并且接收任务，执行任务。</p><p>执行任务的方法为processTasks()方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token function">getAllTaskKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> taskKey <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AbstractDelayTask</span> task <span class="token operator">=</span> <span class="token function">removeTask</span><span class="token punctuation">(</span>taskKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">NacosTaskProcessor</span> processor <span class="token operator">=</span> <span class="token function">getProcessor</span><span class="token punctuation">(</span>taskKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> processor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getEngineLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"processor not found for task, so discarded. "</span> <span class="token operator">+</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 尝试执行同步任务，如果失败会重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">retryFailedTask</span><span class="token punctuation">(</span>taskKey<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getEngineLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Nacos task execute error : "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">retryFailedTask</span><span class="token punctuation">(</span>taskKey<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出来基于Distro模式的同步是异步进行的，并且失败时会将任务重新入队并充实，因此不保证同步结果的强一致性，属于AP模式的一致性策略。</p><h3 id="2-3-5-服务端流程图"><a href="#2-3-5-服务端流程图" class="headerlink" title="2.3.5.服务端流程图"></a>2.3.5.服务端流程图</h3><p><img src="/../../images/image-20210923214042926.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923214042926.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923214042926"></p><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4.总结"></a>2.4.总结</h2><ul><li><p>Nacos的注册表结构是什么样的？</p><ul><li><p>答：Nacos是多级存储模型，最外层通过namespace来实现环境隔离，然后是group分组，分组下就是服务，一个服务有可以分为不同的集群，集群中包含多个实例。因此其注册表结构为一个Map，类型是：</p><p><code>Map&lt;String, Map&lt;String, Service&gt;&gt;</code>，</p><p>外层key是<code>namespace_id</code>，内层key是<code>group+serviceName</code>.</p><p>Service内部维护一个Map，结构是：<code>Map&lt;String,Cluster&gt;</code>，key是clusterName，值是集群信息</p><p>Cluster内部维护一个Set集合，元素是Instance类型，代表集群中的多个实例。</p></li></ul></li><li><p>Nacos如何保证并发写的安全性？</p><ul><li>答：首先，在注册实例时，会对service加锁，不同service之间本身就不存在并发写问题，互不影响。相同service时通过锁来互斥。并且，在更新实例列表时，是基于异步的线程池来完成，而线程池的线程数量为1.</li></ul></li><li><p>Nacos如何避免并发读写的冲突？</p><ul><li>答：Nacos在更新实例列表时，会采用CopyOnWrite技术，首先将Old实例列表拷贝一份，然后更新拷贝的实例列表，再用更新后的实例列表来覆盖旧的实例列表。</li></ul></li><li><p>Nacos如何应对阿里内部数十万服务的并发写请求？</p><ul><li>答：Nacos内部会将服务注册的任务放入阻塞队列，采用线程池异步来完成实例更新，从而提高并发写能力。</li></ul></li></ul><h1 id="3-服务心跳"><a href="#3-服务心跳" class="headerlink" title="3.服务心跳"></a>3.服务心跳</h1><p>Nacos的实例分为临时实例和永久实例两种，可以通过在yaml 文件配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> order<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置实例为永久实例。true：临时; false：永久</span>      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.150.1<span class="token punctuation">:</span><span class="token number">8845</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>临时实例基于心跳方式做健康检测，而永久实例则是由Nacos主动探测实例状态。</p><p>其中Nacos提供的心跳的API接口为：</p><p><strong>接口描述</strong>：发送某个实例的心跳</p><p><strong>请求类型</strong>：PUT</p><p><strong>请求路径</strong>：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">/nacos/v1/ns/instance/beat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>请求参数</strong>：</p><table><thead><tr><th align="left">名称</th><th align="left">类型</th><th align="left">是否必选</th><th>描述</th></tr></thead><tbody><tr><td align="left">serviceName</td><td align="left">字符串</td><td align="left">是</td><td>服务名</td></tr><tr><td align="left">groupName</td><td align="left">字符串</td><td align="left">否</td><td>分组名</td></tr><tr><td align="left">ephemeral</td><td align="left">boolean</td><td align="left">否</td><td>是否临时实例</td></tr><tr><td align="left">beat</td><td align="left">JSON格式字符串</td><td align="left">是</td><td>实例心跳内容</td></tr></tbody></table><p><strong>错误编码</strong>：</p><table><thead><tr><th align="left">错误代码</th><th align="left">描述</th><th align="left">语义</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求中的语法错误</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">没有权限</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">无法找到资源</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">正常</td></tr></tbody></table><h2 id="3-1-客户端"><a href="#3-1-客户端" class="headerlink" title="3.1.客户端"></a>3.1.客户端</h2><p>在2.2.4.服务注册这一节中，我们说过NacosNamingService这个类实现了服务的注册，同时也实现了服务心跳：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkInstanceIsLegal</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> groupedServiceName <span class="token operator">=</span> <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断是否是临时实例。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果是临时实例，则构建心跳信息BeatInfo</span>        <span class="token class-name">BeatInfo</span> beatInfo <span class="token operator">=</span> beatReactor<span class="token punctuation">.</span><span class="token function">buildBeatInfo</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加心跳任务</span>        beatReactor<span class="token punctuation">.</span><span class="token function">addBeatInfo</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    serverProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>groupedServiceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-1-BeatInfo"><a href="#3-1-1-BeatInfo" class="headerlink" title="3.1.1.BeatInfo"></a>3.1.1.BeatInfo</h3><p>这里的BeanInfo就包含心跳需要的各种信息：</p><p><img src="/../../images/image-20210922213313677.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922213313677.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922213313677"></p><h3 id="3-1-2-BeatReactor"><a href="#3-1-2-BeatReactor" class="headerlink" title="3.1.2.BeatReactor"></a>3.1.2.BeatReactor</h3><p>而<code>BeatReactor</code>这个类则维护了一个线程池：</p><p><img src="/../../images/image-20210922213455549.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922213455549.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922213455549"></p><p>当调用<code>BeatReactor</code>的<code>.addBeatInfo(groupedServiceName, beatInfo)</code>方法时，就会执行心跳：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBeatInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">BeatInfo</span> beatInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[BEAT] adding beat: &#123;&#125; to beat map."</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">buildKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BeatInfo</span> existBeat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//fix #1733</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>existBeat <span class="token operator">=</span> dom2Beat<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        existBeat<span class="token punctuation">.</span><span class="token function">setStopped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dom2Beat<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 利用线程池，定期执行心跳任务，周期为 beatInfo.getPeriod()</span>    executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeatTask</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MetricsMonitor</span><span class="token punctuation">.</span><span class="token function">getDom2BeatSizeMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dom2Beat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>心跳周期的默认值在<code>com.alibaba.nacos.api.common.Constants</code>类中：</p><p><img src="/../../images/image-20210922213829632.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922213829632.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922213829632"></p><p>可以看到是5秒，默认5秒一次心跳。</p><h3 id="3-1-3-BeatTask"><a href="#3-1-3-BeatTask" class="headerlink" title="3.1.3.BeatTask"></a>3.1.3.BeatTask</h3><p>心跳的任务封装在<code>BeatTask</code>这个类中，是一个Runnable，其run方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取心跳周期</span>    <span class="token keyword">long</span> nextTime <span class="token operator">=</span> beatInfo<span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 发送心跳</span>        <span class="token class-name">JsonNode</span> result <span class="token operator">=</span> serverProxy<span class="token punctuation">.</span><span class="token function">sendBeat</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">,</span> <span class="token class-name">BeatReactor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>lightBeatEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> interval <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"clientBeatInterval"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> lightBeatEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>LIGHT_BEAT_ENABLED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lightBeatEnabled <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>LIGHT_BEAT_ENABLED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">BeatReactor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>lightBeatEnabled <span class="token operator">=</span> lightBeatEnabled<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nextTime <span class="token operator">=</span> interval<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断心跳结果</span>        <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token class-name">NamingResponseCode</span><span class="token punctuation">.</span>OK<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CODE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            code <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CODE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token class-name">NamingResponseCode</span><span class="token punctuation">.</span>RESOURCE_NOT_FOUND<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果失败，则需要 重新注册实例</span>            <span class="token class-name">Instance</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setInstanceId</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance<span class="token punctuation">.</span><span class="token function">setEphemeral</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                serverProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] failed to send beat: &#123;&#125;, code: &#123;&#125;, msg: &#123;&#125;"</span><span class="token punctuation">,</span>                            <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getErrCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getErrMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> unknownEx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] failed to send beat: &#123;&#125;, unknown exception msg: &#123;&#125;"</span><span class="token punctuation">,</span>                            <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> unknownEx<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unknownEx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeatTask</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> nextTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-5-发送心跳"><a href="#3-1-5-发送心跳" class="headerlink" title="3.1.5.发送心跳"></a>3.1.5.发送心跳</h3><p>最终心跳的发送还是通过<code>NamingProxy</code>的<code>sendBeat</code>方法来实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">JsonNode</span> <span class="token function">sendBeat</span><span class="token punctuation">(</span><span class="token class-name">BeatInfo</span> beatInfo<span class="token punctuation">,</span> <span class="token keyword">boolean</span> lightBeatEnabled<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[BEAT] &#123;&#125; sending beat to server: &#123;&#125;"</span><span class="token punctuation">,</span> namespaceId<span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 组织请求参数</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> bodyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lightBeatEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bodyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"beat"</span><span class="token punctuation">,</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> namespaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CLUSTER_NAME<span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>beatInfo<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送请求，这个地址就是：/v1/ns/instance/beat</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token function">reqApi</span><span class="token punctuation">(</span><span class="token class-name">UtilAndComs</span><span class="token punctuation">.</span>nacosUrlBase <span class="token operator">+</span> <span class="token string">"/instance/beat"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> bodyMap<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toObj</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-服务端"><a href="#3-2-服务端" class="headerlink" title="3.2.服务端"></a>3.2.服务端</h2><p>对于临时实例，服务端代码分两部分：</p><ul><li>1）InstanceController提供了一个接口，处理客户端的心跳请求</li><li>2）定时检测实例心跳是否按期执行</li></ul><h3 id="3-2-1-InstanceController"><a href="#3-2-1-InstanceController" class="headerlink" title="3.2.1.InstanceController"></a>3.2.1.InstanceController</h3><p>与服务注册时一样，在nacos-naming模块中的InstanceController类中，定义了一个方法用来处理心跳请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CanDistro</span><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/beat"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span>parser <span class="token operator">=</span> <span class="token class-name">NamingResourceParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token class-name">ActionTypes</span><span class="token punctuation">.</span>WRITE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ObjectNode</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// 解析心跳的请求参数</span>    <span class="token class-name">ObjectNode</span> result <span class="token operator">=</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">createEmptyJsonNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SwitchEntry</span><span class="token punctuation">.</span>CLIENT_BEAT_INTERVAL<span class="token punctuation">,</span> switchDomain<span class="token punctuation">.</span><span class="token function">getClientBeatInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> beat <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"beat"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RsInfo</span> clientBeat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        clientBeat <span class="token operator">=</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toObj</span><span class="token punctuation">(</span>beat<span class="token punctuation">,</span> <span class="token class-name">RsInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> clusterName <span class="token operator">=</span> <span class="token class-name">WebUtils</span>        <span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CLUSTER_NAME<span class="token punctuation">,</span> <span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>DEFAULT_CLUSTER_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"ip"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientBeat <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            clusterName <span class="token operator">=</span> clientBeat<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// fix #2533</span>            clientBeat<span class="token punctuation">.</span><span class="token function">setCluster</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ip <span class="token operator">=</span> clientBeat<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        port <span class="token operator">=</span> clientBeat<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> namespaceId <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_NAMESPACE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> serviceName <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkServiceNameFormat</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] full arguments: beat: &#123;&#125;, serviceName: &#123;&#125;"</span><span class="token punctuation">,</span> clientBeat<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 尝试根据参数中的namespaceId、serviceName、clusterName、ip、port等信息</span>    <span class="token comment">// 从Nacos的注册表中 获取实例</span>    <span class="token class-name">Instance</span> instance <span class="token operator">=</span> serviceManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> clusterName<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果获取失败，说明心跳失败，实例尚未注册</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientBeat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CODE<span class="token punctuation">,</span> <span class="token class-name">NamingResponseCode</span><span class="token punctuation">.</span>RESOURCE_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] The instance has been removed for health mechanism, "</span>                             <span class="token operator">+</span> <span class="token string">"perform data compensation operations, beat: &#123;&#125;, serviceName: &#123;&#125;"</span><span class="token punctuation">,</span> clientBeat<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里重新注册一个实例</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setInstanceId</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">setEphemeral</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceManager<span class="token punctuation">.</span><span class="token function">registerInstance</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 尝试基于namespaceId和serviceName从 注册表中获取Service服务</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> serviceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果不存在，说明服务不存在，返回404</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NacosException</span><span class="token punctuation">(</span><span class="token class-name">NacosException</span><span class="token punctuation">.</span>SERVER_ERROR<span class="token punctuation">,</span>                                 <span class="token string">"service not found: "</span> <span class="token operator">+</span> serviceName <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> namespaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientBeat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        clientBeat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RsInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clientBeat<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        clientBeat<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        clientBeat<span class="token punctuation">.</span><span class="token function">setCluster</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果心跳没问题，开始处理心跳结果</span>    service<span class="token punctuation">.</span><span class="token function">processClientBeat</span><span class="token punctuation">(</span>clientBeat<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>CODE<span class="token punctuation">,</span> <span class="token class-name">NamingResponseCode</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">containsMetadata</span><span class="token punctuation">(</span><span class="token class-name">PreservedMetadataKeys</span><span class="token punctuation">.</span>HEART_BEAT_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SwitchEntry</span><span class="token punctuation">.</span>CLIENT_BEAT_INTERVAL<span class="token punctuation">,</span> instance<span class="token punctuation">.</span><span class="token function">getInstanceHeartBeatInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SwitchEntry</span><span class="token punctuation">.</span>LIGHT_BEAT_ENABLED<span class="token punctuation">,</span> switchDomain<span class="token punctuation">.</span><span class="token function">isLightBeatEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，在确认心跳请求对应的服务、实例都在的情况下，开始交给Service类处理这次心跳请求。调用了Service的processClientBeat方法</p><h3 id="3-2-2-处理心跳请求"><a href="#3-2-2-处理心跳请求" class="headerlink" title="3.2.2.处理心跳请求"></a>3.2.2.处理心跳请求</h3><p>查看<code>Service</code>的<code>service.processClientBeat(clientBeat);</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processClientBeat</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RsInfo</span> rsInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClientBeatProcessor</span> clientBeatProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientBeatProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    clientBeatProcessor<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    clientBeatProcessor<span class="token punctuation">.</span><span class="token function">setRsInfo</span><span class="token punctuation">(</span>rsInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HealthCheckReactor</span><span class="token punctuation">.</span><span class="token function">scheduleNow</span><span class="token punctuation">(</span>clientBeatProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到心跳信息被封装到了 ClientBeatProcessor类中，交给了HealthCheckReactor处理，HealthCheckReactor就是对线程池的封装，不用过多查看。</p><p>关键的业务逻辑都在ClientBeatProcessor这个类中，它是一个Runnable，其中的run方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>service<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] processing beat: &#123;&#125;"</span><span class="token punctuation">,</span> rsInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> ip <span class="token operator">=</span> rsInfo<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> clusterName <span class="token operator">=</span> rsInfo<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> port <span class="token operator">=</span> rsInfo<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取集群信息</span>    <span class="token class-name">Cluster</span> cluster <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClusterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取集群中的所有实例信息</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">allIPs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 找到心跳的这个实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"[CLIENT-BEAT] refresh beat: &#123;&#125;"</span><span class="token punctuation">,</span> rsInfo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 更新实例的最后一次心跳时间 lastBeat</span>            instance<span class="token punctuation">.</span><span class="token function">setLastBeat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span><span class="token function">isMarked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance<span class="token punctuation">.</span><span class="token function">setHealthy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>EVT_LOG                        <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"service: &#123;&#125; &#123;POS&#125; &#123;IP-ENABLED&#125; valid: &#123;&#125;:&#123;&#125;@&#123;&#125;, region: &#123;&#125;, msg: client beat ok"</span><span class="token punctuation">,</span>                              cluster<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> cluster<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token class-name">UtilsAndCommons</span><span class="token punctuation">.</span>LOCALHOST_SITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">getPushService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceChanged</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理心跳请求的核心就是更新心跳实例的最后一次心跳时间，lastBeat，这个会成为判断实例心跳是否过期的关键指标！</p><h3 id="3-3-3-心跳异常检测"><a href="#3-3-3-心跳异常检测" class="headerlink" title="3.3.3.心跳异常检测"></a>3.3.3.心跳异常检测</h3><p>在服务注册时，一定会创建一个<code>Service</code>对象，而<code>Service</code>中有一个<code>init</code>方法，会在注册时被调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开启心跳检测的任务</span>    <span class="token class-name">HealthCheckReactor</span><span class="token punctuation">.</span><span class="token function">scheduleCheck</span><span class="token punctuation">(</span>clientBeatCheckTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cluster</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> clusterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中HealthCheckReactor.scheduleCheck就是执行心跳检测的定时任务：</p><p><img src="/../../images/image-20210922221022107.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922221022107.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922221022107"></p><p>可以看到，该任务是5000ms执行一次，也就是5秒对实例的心跳状态做一次检测。</p><p>此处的ClientBeatCheckTask同样是一个Runnable，其中的run方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 找到所有临时实例的列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> instances <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">allIPs</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// first set health status of instances:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 判断 心跳间隔（当前时间 - 最后一次心跳时间） 是否大于 心跳超时时间，默认15秒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> instance<span class="token punctuation">.</span><span class="token function">getLastBeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> instance<span class="token punctuation">.</span><span class="token function">getInstanceHeartBeatTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span><span class="token function">isMarked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 如果超时，标记实例为不健康 healthy = false</span>                        instance<span class="token punctuation">.</span><span class="token function">setHealthy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 发布实例状态变更的事件</span>                        <span class="token function">getPushService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceChanged</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ApplicationUtils</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstanceHeartbeatTimeoutEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getGlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isExpireInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// then remove obsolete instances:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isMarked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>           <span class="token comment">// 判断心跳间隔（当前时间 - 最后一次心跳时间）是否大于 实例被删除的最长超时时间，默认30秒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> instance<span class="token punctuation">.</span><span class="token function">getLastBeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> instance<span class="token punctuation">.</span><span class="token function">getIpDeleteTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果是超过了30秒，则删除实例</span>                <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[AUTO-DELETE-IP] service: &#123;&#125;, ip: &#123;&#125;"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">deleteIp</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception while processing client beat time out."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的超时时间同样是在<code>com.alibaba.nacos.api.common.Constants</code>这个类中：</p><p><img src="/../../images/image-20210922221344417.png" class="lazyload placeholder" data-srcset="/../../images/image-20210922221344417.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210922221344417"></p><h3 id="3-3-4-主动健康检测"><a href="#3-3-4-主动健康检测" class="headerlink" title="3.3.4.主动健康检测"></a>3.3.4.主动健康检测</h3><p>对于非临时实例（ephemeral&#x3D;false)，Nacos会采用主动的健康检测，定时向实例发送请求，根据响应来判断实例健康状态。</p><p>入口在2.3.2小节的<code>ServiceManager</code>类中的registerInstance方法：</p><p><img src="/../../images/image-20210923100740065.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923100740065.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923100740065"></p><p>创建空服务时：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createEmptyService</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> local<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果服务不存在，创建新的服务</span>    <span class="token function">createServiceIfAbsent</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> local<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建服务流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createServiceIfAbsent</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> local<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试获取服务</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 发现服务不存在，开始创建新服务</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"creating empty service &#123;&#125;:&#123;&#125;"</span><span class="token punctuation">,</span> namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setNamespaceId</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// now validate the service. if failed, exception will be thrown</span>        service<span class="token punctuation">.</span><span class="token function">setLastModifiedMillis</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">recalculateChecksum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cluster <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cluster<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            service<span class="token punctuation">.</span><span class="token function">getClusterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cluster<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        service<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ** 写入注册表并初始化 **</span>        <span class="token function">putServiceAndInit</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>local<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addOrReplaceService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键在<code>putServiceAndInit(service)</code>方法中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">putServiceAndInit</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将服务写入注册表</span>    <span class="token function">putService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>    service <span class="token operator">=</span> <span class="token function">getService</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getNamespaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 完成服务的初始化</span>    service<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consistencyService        <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">buildInstanceListKey</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getNamespaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>    consistencyService        <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">KeyBuilder</span><span class="token punctuation">.</span><span class="token function">buildInstanceListKey</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getNamespaceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[NEW-SERVICE] &#123;&#125;"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入初始化逻辑：<code>service.init()</code>，这个会进入Service类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Init service.     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 开启临时实例的心跳监测任务</span>    <span class="token class-name">HealthCheckReactor</span><span class="token punctuation">.</span><span class="token function">scheduleCheck</span><span class="token punctuation">(</span>clientBeatCheckTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历注册表中的集群</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cluster</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> clusterMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 完成集群初识化</span>        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里集群的初始化<code> entry.getValue().init();</code>会进入<code>Cluster</code>类型的<code>init()</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Init cluster.     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建健康检测的任务</span>    checkTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HealthCheckTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里会开启对 非临时实例的 定时健康检测</span>    <span class="token class-name">HealthCheckReactor</span><span class="token punctuation">.</span><span class="token function">scheduleCheck</span><span class="token punctuation">(</span>checkTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>HealthCheckReactor.scheduleCheck(checkTask);</code>会开启定时任务，对非临时实例做健康检测。检测逻辑定义在<code>HealthCheckTask</code>这个类中，是一个Runnable，其中的run方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>distroMapper<span class="token punctuation">.</span><span class="token function">responsible</span><span class="token punctuation">(</span>cluster<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> switchDomain            <span class="token punctuation">.</span><span class="token function">isHealthCheckEnabled</span><span class="token punctuation">(</span>cluster<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 开始健康检测</span>            healthCheckProcessor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 记录日志 。。。</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 记录日志 。。。</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 结束后，再次进行任务调度，一定延迟后执行</span>            <span class="token class-name">HealthCheckReactor</span><span class="token punctuation">.</span><span class="token function">scheduleCheck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 。。。</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>健康检测逻辑定义在<code>healthCheckProcessor.process(this);</code>方法中，在HealthCheckProcessor接口中，这个接口也有很多实现，默认是<code>TcpSuperSenseProcessor</code>：</p><p><img src="/../../images/image-20210923102824451.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923102824451.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923102824451"></p><p>进入<code>TcpSuperSenseProcessor</code>的process方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">HealthCheckTask</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取所有 非临时实例的 集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> ips <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allIPs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Instance</span> ip <span class="token operator">:</span> ips<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 封装健康检测信息到 Beat</span>        <span class="token class-name">Beat</span> beat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Beat</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 放入一个阻塞队列中</span>        taskQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MetricsMonitor</span><span class="token punctuation">.</span><span class="token function">getTcpHealthCheckMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，所有的健康检测任务都被放入一个阻塞队列，而不是立即执行了。这里又采用了异步执行的策略，可以看到Nacos中大量这样的设计。</p><p>而<code>TcpSuperSenseProcessor</code>本身就是一个Runnable，在它的构造函数中会把自己放入线程池中去执行，其run方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 处理任务</span>            <span class="token function">processTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            SRV_LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[HEALTH-CHECK] error while processing NIO task"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过processTask来处理健康检测的任务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将任务封装为一个 TaskProcessor，并放入集合</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Beat</span> beat <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>CONNECT_TIMEOUT_MS <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskProcessor</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>taskQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> NIO_THREAD_COUNT <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 批量处理集合中的任务</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> f <span class="token operator">:</span> <span class="token class-name">GlobalExecutor</span><span class="token punctuation">.</span><span class="token function">invokeAllTcpSuperSenseTask</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务被封装到了TaskProcessor中去执行了，TaskProcessor是一个Callable，其中的call方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取检测任务已经等待的时长</span>    <span class="token keyword">long</span> waited <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beat<span class="token punctuation">.</span><span class="token function">getStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>waited <span class="token operator">></span> MAX_WAIT_TIME_MILLISECONDS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"beat task waited too long: "</span> <span class="token operator">+</span> waited <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取实例信息</span>        <span class="token class-name">Instance</span> instance <span class="token operator">=</span> beat<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过NIO建立TCP连接</span>        channel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// only by setting this can we make the socket close event asynchronous</span>        channel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSoLinger</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReuseAddress</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTcpNoDelay</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cluster</span> cluster <span class="token operator">=</span> beat<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">isUseIPPort4Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cluster<span class="token punctuation">.</span><span class="token function">getDefCkport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册连接、读取事件</span>        <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">;</span>        keyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beat<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeatKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beat<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GlobalExecutor</span>            <span class="token punctuation">.</span><span class="token function">scheduleTcpSuperSenseTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeOutTask</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> CONNECT_TIMEOUT_MS<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        beat<span class="token punctuation">.</span><span class="token function">finishCheck</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> switchDomain<span class="token punctuation">.</span><span class="token function">getTcpHealthParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token string">"tcp:error:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3.总结"></a>3.3.总结</h2><p>Nacos的健康检测有两种模式：</p><ul><li>临时实例：<ul><li>采用客户端心跳检测模式，心跳周期5秒</li><li>心跳间隔超过15秒则标记为不健康</li><li>心跳间隔超过30秒则从服务列表删除</li></ul></li><li>永久实例：<ul><li>采用服务端主动健康检测方式</li><li>周期为2000 + 5000毫秒内的随机数</li><li>检测异常只会标记为不健康，不会删除</li></ul></li></ul><p>那么为什么Nacos有临时和永久两种实例呢？</p><p>以淘宝为例，双十一大促期间，流量会比平常高出很多，此时服务肯定需要增加更多实例来应对高并发，而这些实例在双十一之后就无需继续使用了，采用<strong>临时实例</strong>比较合适。而对于服务的一些常备实例，则使用<strong>永久实例</strong>更合适。</p><p>与eureka相比，Nacos与Eureka在临时实例上都是基于心跳模式实现，差别不大，主要是心跳周期不同，eureka是30秒，Nacos是5秒。</p><p>另外，Nacos支持永久实例，而Eureka不支持，Eureka只提供了心跳模式的健康监测，而没有主动检测功能。</p><h1 id="4-服务发现"><a href="#4-服务发现" class="headerlink" title="4.服务发现"></a>4.服务发现</h1><p>Nacos提供了一个根据serviceId查询实例列表的接口：</p><p><strong>接口描述</strong>：查询服务下的实例列表</p><p><strong>请求类型</strong>：GET</p><p><strong>请求路径</strong>：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">/nacos/v1/ns/instance/list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>请求参数</strong>：</p><table><thead><tr><th align="left">名称</th><th align="left">类型</th><th align="left">是否必选</th><th>描述</th></tr></thead><tbody><tr><td align="left">serviceName</td><td align="left">字符串</td><td align="left">是</td><td>服务名</td></tr><tr><td align="left">groupName</td><td align="left">字符串</td><td align="left">否</td><td>分组名</td></tr><tr><td align="left">namespaceId</td><td align="left">字符串</td><td align="left">否</td><td>命名空间ID</td></tr><tr><td align="left">clusters</td><td align="left">字符串，多个集群用逗号分隔</td><td align="left">否</td><td>集群名称</td></tr><tr><td align="left">healthyOnly</td><td align="left">boolean</td><td align="left">否，默认为false</td><td>是否只返回健康实例</td></tr></tbody></table><p><strong>错误编码</strong>：</p><table><thead><tr><th align="left">错误代码</th><th align="left">描述</th><th align="left">语义</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求中的语法错误</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">没有权限</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">无法找到资源</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">正常</td></tr></tbody></table><h2 id="4-1-客户端"><a href="#4-1-客户端" class="headerlink" title="4.1.客户端"></a>4.1.客户端</h2><h3 id="4-1-1-定时更新服务列表"><a href="#4-1-1-定时更新服务列表" class="headerlink" title="4.1.1.定时更新服务列表"></a>4.1.1.定时更新服务列表</h3><h4 id="4-1-1-1-NacosNamingService"><a href="#4-1-1-1-NacosNamingService" class="headerlink" title="4.1.1.1.NacosNamingService"></a>4.1.1.1.NacosNamingService</h4><p>在2.2.4小节中，我们讲到一个类<code>NacosNamingService</code>，这个类不仅仅提供了服务注册功能，同样提供了服务发现的功能。</p><p><img src="/../../images/image-20210923153419392.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923153419392.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923153419392"></p><p>多个重载的方法最终都会进入一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> <span class="token function">getAllInstances</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> clusters<span class="token punctuation">,</span>                                      <span class="token keyword">boolean</span> subscribe<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ServiceInfo</span> serviceInfo<span class="token punctuation">;</span>    <span class="token comment">// 1.判断是否需要订阅服务信息（默认为 true）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.1.订阅服务信息</span>        serviceInfo <span class="token operator">=</span> hostReactor<span class="token punctuation">.</span><span class="token function">getServiceInfo</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                 <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>clusters<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.2.直接去nacos拉取服务信息</span>        serviceInfo <span class="token operator">=</span> hostReactor            <span class="token punctuation">.</span><span class="token function">getServiceInfoDirectlyFromServer</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span>                                              <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>clusters<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2.从服务信息中获取实例列表并返回</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceInfo <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list <span class="token operator">=</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Instance</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-1-2-HostReactor"><a href="#4-1-1-2-HostReactor" class="headerlink" title="4.1.1.2.HostReactor"></a>4.1.1.2.HostReactor</h4><p>进入1.1.订阅服务消息，这里是由<code>HostReactor</code>类的<code>getServiceInfo()</code>方法来实现的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ServiceInfo</span> <span class="token function">getServiceInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clusters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"failover-mode: "</span> <span class="token operator">+</span> failoverReactor<span class="token punctuation">.</span><span class="token function">isFailoverSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 由 服务名@@集群名拼接 key</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">ServiceInfo</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>failoverReactor<span class="token punctuation">.</span><span class="token function">isFailoverSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> failoverReactor<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取本地服务列表的缓存，缓存是一个Map，格式：Map&lt;String, ServiceInfo></span>    <span class="token class-name">ServiceInfo</span> serviceObj <span class="token operator">=</span> <span class="token function">getServiceInfo0</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断缓存是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> serviceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不存在，创建空ServiceInfo</span>        serviceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceInfo</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 放入缓存</span>        serviceInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceObj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 放入待更新的服务列表（updatingMap）中</span>        updatingMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 立即更新服务列表</span>        <span class="token function">updateServiceNow</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从待更新列表中移除</span>        updatingMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>updatingMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 缓存中有，但是需要更新</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>UPDATE_HOLD_INTERVAL <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// hold a moment waiting for update finish 等待5秒中，待更新完成</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>serviceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    serviceObj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>UPDATE_HOLD_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    NAMING_LOGGER                        <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[getServiceInfo] serviceName:"</span> <span class="token operator">+</span> serviceName <span class="token operator">+</span> <span class="token string">", clusters:"</span> <span class="token operator">+</span> clusters<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 开启定时更新服务列表的功能</span>    <span class="token function">scheduleUpdateIfAbsent</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回缓存中的服务信息</span>    <span class="token keyword">return</span> serviceInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serviceObj<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本逻辑就是先从本地缓存读，根据结果来选择：</p><ul><li><p>如果本地缓存没有，立即去nacos读取，<code>updateServiceNow(serviceName, clusters)</code></p><p><img src="/../../images/image-20210923161528710.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923161528710.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923161528710"></p></li><li><p>如果本地缓存有，则开启定时更新功能，并返回缓存结果：</p><ul><li><code>scheduleUpdateIfAbsent(serviceName, clusters)</code></li></ul><p><img src="/../../images/image-20210923161630575.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923161630575.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923161630575"></p><p>在UpdateTask中，最终还是调用updateService方法：</p><p><img src="/../../images/image-20210923161752521.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923161752521.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923161752521"></p></li></ul><p>不管是立即更新服务列表，还是定时更新服务列表，最终都会执行HostReactor中的updateService()方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateService</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> clusters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ServiceInfo</span> oldService <span class="token operator">=</span> <span class="token function">getServiceInfo0</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 基于ServerProxy发起远程调用，查询服务列表</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> serverProxy<span class="token punctuation">.</span><span class="token function">queryList</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">,</span> pushReceiver<span class="token punctuation">.</span><span class="token function">getUdpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 处理查询结果</span>            <span class="token function">processServiceJson</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>oldService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oldService<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-1-3-ServerProxy"><a href="#4-1-1-3-ServerProxy" class="headerlink" title="4.1.1.3.ServerProxy"></a>4.1.1.3.ServerProxy</h4><p>而ServerProxy的queryList方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryList</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> clusters<span class="token punctuation">,</span> <span class="token keyword">int</span> udpPort<span class="token punctuation">,</span> <span class="token keyword">boolean</span> healthyOnly<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 准备请求参数</span>    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> namespaceId<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"clusters"</span><span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"udpPort"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>udpPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"clientIP"</span><span class="token punctuation">,</span> <span class="token class-name">NetUtils</span><span class="token punctuation">.</span><span class="token function">localIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"healthyOnly"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>healthyOnly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发起请求，地址与API接口一致</span>    <span class="token keyword">return</span> <span class="token function">reqApi</span><span class="token punctuation">(</span><span class="token class-name">UtilAndComs</span><span class="token punctuation">.</span>nacosUrlBase <span class="token operator">+</span> <span class="token string">"/instance/list"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-处理服务变更通知"><a href="#4-1-2-处理服务变更通知" class="headerlink" title="4.1.2.处理服务变更通知"></a>4.1.2.处理服务变更通知</h3><p>除了定时更新服务列表的功能外，Nacos还支持服务列表变更时的主动推送功能。</p><p>在HostReactor类的构造函数中，有非常重要的几个步骤：</p><p><img src="/../../images/image-20210923164145915.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923164145915.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923164145915"></p><p>基本思路是：</p><ul><li>通过PushReceiver监听服务端推送的变更数据</li><li>解析数据后，通过NotifyCenter发布服务变更的事件</li><li>InstanceChangeNotifier监听变更事件，完成对服务列表的更新</li></ul><h4 id="4-1-2-1-PushReceiver"><a href="#4-1-2-1-PushReceiver" class="headerlink" title="4.1.2.1.PushReceiver"></a>4.1.2.1.PushReceiver</h4><p>我们先看PushReceiver，这个类会以UDP方式接收Nacos服务端推送的服务变更数据。</p><p>先看构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PushReceiver</span><span class="token punctuation">(</span><span class="token class-name">HostReactor</span> hostReactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hostReactor <span class="token operator">=</span> hostReactor<span class="token punctuation">;</span>        <span class="token comment">// 创建 UDP客户端</span>        <span class="token class-name">String</span> udpPort <span class="token operator">=</span> <span class="token function">getPushReceiverUdpPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>udpPort<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>udpPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 准备线程池</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"com.alibaba.nacos.naming.push.receiver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> thread<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开启线程任务，准备接收变更数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NA] init udp socket failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PushReceiver构造函数中基于线程池来运行任务。这是因为PushReceiver本身也是一个Runnable，其中的run方法业务逻辑如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// byte[] is initialized with 0 full filled by default</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>UDP_MSS<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收推送数据</span>            udpSocket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析为json字符串</span>            <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">IoUtils</span><span class="token punctuation">.</span><span class="token function">tryDecompress</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"received push data: "</span> <span class="token operator">+</span> json <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化为对象</span>            <span class="token class-name">PushPacket</span> pushPacket <span class="token operator">=</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toObj</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">PushPacket</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> ack<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pushPacket<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"service"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pushPacket<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 交给 HostReactor去处理</span>                hostReactor<span class="token punctuation">.</span><span class="token function">processServiceJson</span><span class="token punctuation">(</span>pushPacket<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// send ack to server 发送ACK回执，略。。</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NA] error while receiving push data"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-2-HostReactor"><a href="#4-1-2-2-HostReactor" class="headerlink" title="4.1.2.2.HostReactor"></a>4.1.2.2.HostReactor</h4><p>通知数据的处理由交给了<code>HostReactor</code>的<code>processServiceJson</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ServiceInfo</span> <span class="token function">processServiceJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解析出ServiceInfo信息</span>    <span class="token class-name">ServiceInfo</span> serviceInfo <span class="token operator">=</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">toObj</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">ServiceInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> serviceKey <span class="token operator">=</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serviceKey <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查询缓存中的 ServiceInfo</span>    <span class="token class-name">ServiceInfo</span> oldService <span class="token operator">=</span> serviceInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serviceKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果缓存存在，则需要校验哪些数据要更新</span>    <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 拉取的数据是否已经过期</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldService<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> serviceInfo<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            NAMING_LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"out of date data received, old-t: "</span> <span class="token operator">+</span> oldService<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", new-t: "</span>                               <span class="token operator">+</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getLastRefTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 放入缓存</span>        serviceInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceInfo<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中间是缓存与新数据的对比，得到newHosts：新增的实例；remvHosts：待移除的实例;</span>        <span class="token comment">// modHosts：需要修改的实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newHosts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> remvHosts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> modHosts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发布实例变更的事件</span>            <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstancesChangeEvent</span><span class="token punctuation">(</span>                serviceInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                serviceInfo<span class="token punctuation">.</span><span class="token function">getClusters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DiskCache</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>serviceInfo<span class="token punctuation">,</span> cacheDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 本地缓存不存在</span>        changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 放入缓存</span>        serviceInfoMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>serviceInfo<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 直接发布实例变更的事件</span>        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstancesChangeEvent</span><span class="token punctuation">(</span>            serviceInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            serviceInfo<span class="token punctuation">.</span><span class="token function">getClusters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceInfo<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceInfo<span class="token punctuation">.</span><span class="token function">setJsonFromServer</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DiskCache</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>serviceInfo<span class="token punctuation">,</span> cacheDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 。。。</span>    <span class="token keyword">return</span> serviceInfo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-服务端"><a href="#4-2-服务端" class="headerlink" title="4.2.服务端"></a>4.2.服务端</h2><h3 id="4-2-1-拉取服务列表接口"><a href="#4-2-1-拉取服务列表接口" class="headerlink" title="4.2.1.拉取服务列表接口"></a>4.2.1.拉取服务列表接口</h3><p>在2.3.1小节介绍的InstanceController中，提供了拉取服务列表的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Get all instance of input service.     *     * @param request http request     * @return list of instance     * @throws Exception any error during list     */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span>parser <span class="token operator">=</span> <span class="token class-name">NamingResourceParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token class-name">ActionTypes</span><span class="token punctuation">.</span>READ<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ObjectNode</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从request中获取namespaceId和serviceName</span>    <span class="token class-name">String</span> namespaceId <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>NAMESPACE_ID<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span>DEFAULT_NAMESPACE_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> serviceName <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">CommonParams</span><span class="token punctuation">.</span>SERVICE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">checkServiceNameFormat</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> agent <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getUserAgent</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> clusters <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"clusters"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> clientIP <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"clientIP"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取客户端的 UDP端口</span>    <span class="token keyword">int</span> udpPort <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"udpPort"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> env <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isCheck <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"isCheck"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> app <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> tenant <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"tid"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span>EMPTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> healthyOnly <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"healthyOnly"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取服务列表</span>    <span class="token keyword">return</span> <span class="token function">doSrvIpxt</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> clusters<span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> udpPort<span class="token punctuation">,</span> env<span class="token punctuation">,</span> isCheck<span class="token punctuation">,</span> app<span class="token punctuation">,</span> tenant<span class="token punctuation">,</span>                     healthyOnly<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>doSrvIpxt()</code>方法来获取服务列表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ObjectNode</span> <span class="token function">doSrvIpxt</span><span class="token punctuation">(</span><span class="token class-name">String</span> namespaceId<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> agent<span class="token punctuation">,</span>                            <span class="token class-name">String</span> clusters<span class="token punctuation">,</span> <span class="token class-name">String</span> clientIP<span class="token punctuation">,</span>                            <span class="token keyword">int</span> udpPort<span class="token punctuation">,</span> <span class="token class-name">String</span> env<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isCheck<span class="token punctuation">,</span>                            <span class="token class-name">String</span> app<span class="token punctuation">,</span> <span class="token class-name">String</span> tid<span class="token punctuation">,</span> <span class="token keyword">boolean</span> healthyOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClientInfo</span> clientInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientInfo</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectNode</span> result <span class="token operator">=</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">createEmptyJsonNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取服务列表信息</span>    <span class="token class-name">Service</span> service <span class="token operator">=</span> serviceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> cacheMillis <span class="token operator">=</span> switchDomain<span class="token punctuation">.</span><span class="token function">getDefaultCacheMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// now try to enable the push</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>udpPort <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pushService<span class="token punctuation">.</span><span class="token function">canEnablePush</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 添加当前客户端 IP、UDP端口到 PushService 中</span>            pushService                <span class="token punctuation">.</span><span class="token function">addClient</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">,</span> agent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>clientIP<span class="token punctuation">,</span> udpPort<span class="token punctuation">)</span><span class="token punctuation">,</span>                           pushDataSource<span class="token punctuation">,</span> tid<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>            cacheMillis <span class="token operator">=</span> switchDomain<span class="token punctuation">.</span><span class="token function">getPushCacheMillis</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG            <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[NACOS-API] failed to added push client &#123;&#125;, &#123;&#125;:&#123;&#125;"</span><span class="token punctuation">,</span> clientInfo<span class="token punctuation">,</span> clientIP<span class="token punctuation">,</span> udpPort<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheMillis <span class="token operator">=</span> switchDomain<span class="token punctuation">.</span><span class="token function">getDefaultCacheMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果没找到，返回空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Loggers</span><span class="token punctuation">.</span>SRV_LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"no instance to serve for service: &#123;&#125;"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"clusters"</span><span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cacheMillis"</span><span class="token punctuation">,</span> cacheMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">createEmptyArrayNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 结果的检测，异常实例的剔除等逻辑省略</span>    <span class="token comment">// 最终封装结果并返回 。。。</span>    result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"hosts"</span><span class="token punctuation">,</span> hosts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientInfo<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">ClientInfo<span class="token punctuation">.</span>ClientType</span><span class="token punctuation">.</span>JAVA        <span class="token operator">&amp;&amp;</span> clientInfo<span class="token punctuation">.</span>version<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">VersionUtil</span><span class="token punctuation">.</span><span class="token function">parseVersion</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cacheMillis"</span><span class="token punctuation">,</span> cacheMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lastRefTime"</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"checksum"</span><span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">getChecksum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"useSpecifiedURL"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"clusters"</span><span class="token punctuation">,</span> clusters<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"env"</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"metadata"</span><span class="token punctuation">,</span> <span class="token class-name">JacksonUtils</span><span class="token punctuation">.</span><span class="token function">transferToJsonNode</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-发布服务变更的UDP通知"><a href="#4-2-2-发布服务变更的UDP通知" class="headerlink" title="4.2.2.发布服务变更的UDP通知"></a>4.2.2.发布服务变更的UDP通知</h3><p>在上一节中，<code>InstanceController</code>中的<code>doSrvIpxt()</code>方法中，有这样一行代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">pushService<span class="token punctuation">.</span><span class="token function">addClient</span><span class="token punctuation">(</span>namespaceId<span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> clusters<span class="token punctuation">,</span> agent<span class="token punctuation">,</span>                      <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>clientIP<span class="token punctuation">,</span> udpPort<span class="token punctuation">)</span><span class="token punctuation">,</span>                           pushDataSource<span class="token punctuation">,</span> tid<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其实是把消费者的UDP端口、IP等信息封装为一个PushClient对象，存储PushService中。方便以后服务变更后推送消息。</p><p>PushService类本身实现了<code>ApplicationListener</code>接口：</p><p><img src="/../../images/image-20210923182429636.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923182429636.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923182429636"></p><p>这个是事件监听器接口，监听的是ServiceChangeEvent（服务变更事件）。</p><p>当服务列表变化时，就会通知我们：</p><p><img src="/../../images/image-20210923183017424.png" class="lazyload placeholder" data-srcset="/../../images/image-20210923183017424.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg" alt="image-20210923183017424"></p><h2 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3.总结"></a>4.3.总结</h2><p>Nacos的服务发现分为两种模式：</p><ul><li>模式一：主动拉取模式，消费者定期主动从Nacos拉取服务列表并缓存起来，再服务调用时优先读取本地缓存中的服务列表。</li><li>模式二：订阅模式，消费者订阅Nacos中的服务列表，并基于UDP协议来接收服务变更通知。当Nacos中的服务列表更新时，会发送UDP广播给所有订阅者。</li></ul><p>与Eureka相比，Nacos的订阅模式服务状态更新更及时，消费者更容易及时发现服务列表的变化，剔除故障服务。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
